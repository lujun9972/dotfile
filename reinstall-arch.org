#+TITLE: 装Arch记
#+AUTHOR: lujun9972
#+CATEGORY: dotfile
#+DATE: [2016-10-20 四 08:17]
#+OPTIONS: ^:{}

* 安装arch
安装arch很简单，基本上按照arch wiki上写的一步步来就行了。

我主要参考了两个链接：
[[http://bbs.archlinuxcn.org/viewtopic.php?id=1037][Arch Linux 安装指南]]

[[https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)][Arch wiki 安装指南]]

不过在过程中还是遇到了一个小坑：

按照Wiki的说法, =arch-chroot= 之后需要再次设置网络，但是我用wifi-menu重设了一次无线网络后，结果提示
#+BEGIN_EXAMPLE
  Interface 'wlp4s2' is controlled by netctl-auto
#+END_EXAMPLE

然后尝试ping外网发现网络是断的。推出chroot后用 =ip link= 发现wlp4s2接口被down掉了.

在up该接口后,回复互联网的访问. 然后重新进入 =arch-chroot= 继续后面的操作.
#+BEGIN_SRC sh
  ip link set wlp4s2 up
#+END_SRC

* 配置网络

1. 用 =wifi-menu= 配置好wifi
   #+BEGIN_SRC sh :dir /sudo::
     wifi-menu -o
   #+END_SRC

2. 安装自动连接wifi的软件包
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S --needed wpa_actiond ifplugd wpa_supplicant
   #+END_SRC
   其中:
   + wpa_actiond :: 用于自动连接无线网络（Wireless Roaming/autoconnect ）
   + ifplugd :: 用于自动连接以太网（Wired link detection ）。
   + wpa_supplicant :: 用于无线网络认证

3. 关闭netctl服务,启动netctl-auto服务
   #+BEGIN_SRC sh :dir /sudo::
     systemctl disable netctl
     systemctl enable netctl-auto@wlp4s2
   #+END_SRC
     
   *不能同时启动netctl与netctl-auto*,两者冲突
* 配置用户
1. 创建用户
   #+BEGIN_SRC sh :dir /sudo::
     useradd -m -g users -s /bin/bash lujun9972
     # passwd lujun9972
   #+END_SRC
2. 配置sudo
   #+BEGIN_SRC sh :dir /sudo::
     visudo
   #+END_SRC
   让wheel组的用户能够suduo
3. 将用户加入wheel组
   #+BEGIN_SRC sh /sudo::
     usermod -a -G wheel lujun9972
   #+END_SRC

* 配置中文输入法

1. 安装fictx
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S fcitx-im fcitx-configtool fcitx-sunpinyin
   #+END_SRC

2. 在.xinitrc中添加:
   #+BEGIN_SRC conf
     export GTK_IM_MODULE=fcitx
     export QT_IM_MODULE=fcitx
     export XMODIFIERS="@im=fcitx"
     fcitx &
   #+END_SRC

* Git
1. 安装git
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S git
   #+END_SRC

2. 配置git
   #+BEGIN_SRC sh
     git config --global --global user.email "lujun9972@gmail.com"
     git config --global --global user.name "darksun"
     git config --global core.quotepath false
     # 配置diff工具
     git config --global diff.tool ediff
     git config --global difftool.ediff.cmd "~/bin/ediff.sh \"\$LOCAL\" \"\$REMOTE\""
     git config --global difftool.prompt false
     # 配置merge工具
     git config --global merge.tool ediff
     git config --global mergetool.ediff.cmd "~/bin/ediff_merge.sh \"$BASE\" \"\$LOCAL\" \"\$REMOTE\" \"$MERGED\""
     git config --global mergetool.prompt false
     # git config --global mergetool.ediff.trustExitCode true
   #+END_SRC

   #+RESULTS:

* openssh
1. 安装openssh
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S git
   #+END_SRC

2. 生成公钥
   #+BEGIN_SRC sh
     ssh-keygen -y
     cat .ssh/id_rsa.pub
   #+END_SRC

3. 将公钥内容放到 [[https://www.github.com][github]] 中

* Emacs
1. 安装Emacs
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S emacs
   #+END_SRC
2. 安装配置
   #+BEGIN_SRC sh
     git clone git@github.com:lujun9972/bin.git ~/bin
     git clone git@github.com:lujun9972/MyLisp.git ~/MyLisp
     git clone git@github.com:lujun9972/.spacemacs.d.git ~/.spacemacs.d
     mv ~/.emacs.d ~/emacs.d
     git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
   #+END_SRC

* Socketsock
** 安装
#+BEGIN_SRC sh :dir /sudo::
  pacman --noconfirm -S shadowsocks
#+END_SRC

* 窗口管理器
1. 安装X
   #+BEGIN_SRC sh :dir /sudo::
     pacman -S xorg    # 安装 Xorg
     # pacman -S xf86-input-synaptics    # 可选，触摸板支持
     pacman -S ttf-dejavu wqy-microhei    # 可选，Dejavu 与文泉驿 - 微米黑字体
   #+END_SRC

2. 安装awesomeWm
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S awesome
   #+END_SRC

3. 在.xinitrc中添加:
   #+BEGIN_SRC conf
     exec awesome
   #+END_SRC

4. 安装archlinux-xdg-menu
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S archlinux-xdg-menu
   #+END_SRC

5. 生成awesome menu
   #+BEGIN_SRC sh 
     xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua
   #+END_SRC
* 声音配置
Arch Linux默认开启了声音支持，默认静音。用户可通过 alsamixer（所属包：alsa-utils） 取消静音：
#+BEGIN_SRC sh
  pacman --noconfirm -S alsa-utils
#+END_SRC

+ 方向键 选中 Master 和 PCM
+ [M] 取消静音
+ 上下键调整音量
* Terminator(可选,用eshell代替)
1. terminator
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S terminator
   #+END_SRC
* 文件管理器(可选，用dired代替)
1. rox
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S rox
   #+END_SRC
* 多媒体
** 看图工具
1. feh
   #+BEGIN_SRC  sh :dir /sudo::
     pacman --noconfirm -S feh
   #+END_SRC
2. sxiv
   #+BEGIN_SRC  sh :dir /sudo::
     pacman --noconfirm -S sxiv
   #+END_SRC
** 看视频
1. mpv
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S mpv
   #+END_SRC
* 坚果云
1. 安装依赖package
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S glib2 gtk2 libnautilus-extension gvfs jre8-openjdk wget
   #+END_SRC

2. 下载源代码
   #+BEGIN_SRC sh  :dir /sudo::
     curl http://www.jianguoyun.com/static/exe/installer/nutstore_linux_src_installer.tar.gz -o nutstore_linux_src_installer.tar.gz
   #+END_SRC

3. 解压，编译, 安装插件
   #+BEGIN_SRC sh :dir /sudo::
     tar zxf nutstore_linux_src_installer.tar.gz
     cd nutstore_linux_src_installer
     ./configure && make
     make install
     ./runtime_bootstrap
   #+END_SRC

* 添加Archlinux CN 镜像源
#+BEGIN_SRC sh :dir /sudo::
  cat >>/etc/pacman.conf <<EOF
  [archlinuxcn]
  SigLevel = Optional TrustedOnly
  Server = https://mirrors.ustc.edu.cn/archlinuxcn/\$arch
  EOF

  pacman -Syy
  pacman --noconfirm -S archlinuxcn-keyring 
#+END_SRC

#+RESULTS:

* 终端环境下的工具 
** 配置中文环境
1. fbterm支持终端环境中文处理
   #+BEGIN_SRC sh :dir /sudo:: :var YOUR_USERNAME=(user-login-name)
     pacman --noconfirm -S fbterm libx86
     # 若想使用非根用户运行fbterm，需要把用户加入video组
     gpasswd -a $YOUR_USERNAME video
     # 若想非根用户可使用键盘快捷方式，需要：
     sudo setcap 'cap_sys_tty_config+ep' /usr/bin/fbterm
   #+END_SRC
2. 使用fcitx-fbterm作为中文输入法
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S fcitx-fbterm
   #+END_SRC
     安装好后，可以通过 =fcitx-fbterm-helper -l= 启动中文输入法
3. 安装framebuffer下的X server
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S xorg-server-xvfb xf86-video-fbdev
   #+END_SRC
4. framebuffer设置工具
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S fbset
   #+END_SRC
   

** 媒体播放
*** mpg123
 #+BEGIN_SRC sh :dir /sudo::
   pacman --noconfirm -S mpg123
 #+END_SRC
*** moc
 #+BEGIN_SRC sh :dir /sudo::
   pacman --noconfirm -S moc
 #+END_SRC
*** mplayer
安装mplayer
#+BEGIN_SRC sh :dir /sudo::
  pacman --noconfirm -S mplayer
#+END_SRC

mplayer支持在终端环境下播放影片,但是需要指明输出驱动:
#+BEGIN_SRC sh :var MEDIA_FILE=(read-file-name "请选择要播放的视频")
  mplayer -vo fbdev2 $MEDIA_FILE
#+END_SRC

mplayer在播放时支持以下快捷键:

+ 左方向键和右方向键 :: 分别执行倒退 10 秒和快进 10 秒操作
+ 下方向键和上方向键 :: 分别执行倒退 1 分钟和快进 1 分钟操作
+ 下翻页键和上翻页键 :: 分别执行倒退 10 分钟和快进 10 分钟操作
+ f :: 当播放视频时，在全屏和窗口模式之间切换。你也可以在命令行中使用 -fs 选项，以便让 MPlayer 开始在全屏模式中播放。
+ o :: 在播放视频时切换 OSD（OnScreen Display）模式。
+ p 或 Space :: 暂停／继续播放。
+ q 或 Esc :: 退出 MPlayer。在 GUI 模式时，Esc 不会退出，仅停止播放。
+ / 和 * 或 9 和 0 :: 减小或增大音量。
+ m :: 静音切换。
+ T（通常是 Shift + t） :: 播放窗口置顶切换。
+ b 和 j :: 在可用的字幕间循环。
+ x 和 z :: 调整字幕的延迟时间。
+ I（Shift + i） :: 显示播放电影的文件名称。
+ 1 和 2 :: 调整对比度。
+ 3 和 4 :: 调整亮度。
+ 5 和 6 :: 调整色度。
+ 7 和 8 :: 调整饱和度

更多的mplayer操作参见 [[https://linuxtoy.org/archives/playing-around-with-mplayer.html][玩转 MPlayer]]

*** Emacs+EMMS
** w3m浏览网页
#+BEGIN_SRC sh :dir /sudo::
   pacman --noconfirm -S w3m imlib2
#+END_SRC
** ledger基于终端的帐务管理软件
#+BEGIN_SRC sh :dir /sudo::
  pacman --noconfirm -S ledger
#+END_SRC
** 种子下载
1. rtorrent
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S rtorrent
   #+END_SRC

2. aria2
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S aria2
   #+END_SRC

** 日历系统
1. calcurse
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S calcurse
   #+END_SRC
     
   关于calcurse的用法,推荐阅读 [[https://linux.cn/article-4853-1.html][在 Linux 终端下使用 calcurse 安排约会和待办事项]]

2. remind+wyrd
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S remind wyrd
   #+END_SRC

3. Emacs+Org
     
** RSS & podcaster
1. newsbeuter
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S newsbeuter
   #+END_SRC
   
   关于newsbeuter的用法可以参见[[https://linuxtoy.org/archives/newsbeuter.html][Newsbeuter：在控制台下读 RSS 新闻]]

2. Emacs+elfeed+podcaster
** 查看PDF,图片
1. fbida
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S fbida
   #+END_SRC

** 截图工具
1. fbgrab
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S fbida
   #+END_SRC

   #+RESULTS:

** IM工具
1. finch

   这个可以看成是pidgin的CLI版
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S finch
   #+END_SRC


   
** 游戏
1. nethack
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S nethack
   #+END_SRC

** 有趣的工具
1. pv
   
   pv可以以实时敲打出来的方式显示一段文字
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S pv
   #+END_SRC

2. toilet
   
   toilet可以为一段文字添加边框
   #+BEGIN_SRC sh :dir /sudo::
     pacman --noconfirm -S toilet
   #+END_SRC




* 恢复配置
我用Emacs的org-mode来管理dotfile. 

所有的dotfile基本都以src block的形式存在https://github.com/lujun9972/dotfile/blob/master/dotfile.org 中了

只需要执行下面这段emacs-lisp代码就能恢复配置了
#+BEGIN_SRC emacs-lisp :results raw
  (require 'url-handlers)
  (let ((tmpfile (make-temp-name "/tmp/dotfile")))
    (url-copy-file  "https://raw.githubusercontent.com/lujun9972/dotfile/master/dotfile.org" tmpfile)
    (find-file tmpfile)
    (org-mode)
    (call-interactively #'org-babel-tangle)
    (delete-file tmpfile))
#+END_SRC
