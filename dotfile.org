#+TITLE: dotfile
#+AUTHOR: lujun9972
#+CATEGORY: dotfile
#+DATE: [2016-10-20 四 08:08]
#+OPTIONS: ^:{}
#+PROPERTY: header-args :comments link :tangle-mode (identity #o444) :mkdirp yes

* 窗口管理器配置
** AwesomeWM
:PROPERTIES:
:tangle:  ~/.config/awesome/rc.lua
:END:

加载库
#+BEGIN_SRC lua
  -- Standard awesome library
  local gears = require("gears")
  local awful = require("awful")
  awful.rules = require("awful.rules")
  require("awful.autofocus")
  -- Widget and layout library
  local wibox = require("wibox")
  -- Theme handling library
  local beautiful = require("beautiful")
  -- Notification library
  local naughty = require("naughty")
  local menubar = require("menubar")
#+END_SRC

自定义函数
#+BEGIN_SRC lua
  function file_exist_p (file)
    local f = io.open(file)
    if f ~= nil then
      io.close(f)
      return true
    else
      return false
    end
  end
#+END_SRC

错误处理
#+BEGIN_SRC lua
  -- Check if awesome encountered an error during startup and fell back to
  -- another config (This code will only ever execute for the fallback config)
  if awesome.startup_errors then
      naughty.notify({ preset = naughty.config.presets.critical,
                       title = "Oops, there were errors during startup!",
                       text = awesome.startup_errors })
  end

  -- Handle runtime errors after startup
  do
      local in_error = false
      awesome.connect_signal("debug::error", function (err)
          -- Make sure we don't go into an endless error loop
          if in_error then return end
          in_error = true

          naughty.notify({ preset = naughty.config.presets.critical,
                           title = "Oops, an error happened!",
                           text = err })
          in_error = false
      end)
  end
#+END_SRC

变量定义
#+BEGIN_SRC lua
  -- This is used later as the default terminal and editor to run.
  terminal = "xterm"
  editor = os.getenv("EDITOR") or "vi"
  editor_cmd = terminal .. " -e " .. editor
  emacsclient_newframe = "emacsclient -a \"\" -n -c "

  -- Default modkey.
  -- Usually, Mod4 is the key with a logo between Control and Alt.
  -- If you do not like this or do not have such a key,
  -- I suggest you to remap Mod4 to another key using xmodmap or other tools.
  -- However, you can use another modifier like Mod1, but it may interact with others.
  modkey = "Mod4"

  -- Table of layouts to cover with awful.layout.inc, order matters.
  local layouts =
    {
      awful.layout.suit.floating,
      awful.layout.suit.tile,
      awful.layout.suit.tile.left,
      awful.layout.suit.tile.bottom,
      awful.layout.suit.tile.top,
      awful.layout.suit.fair,
      awful.layout.suit.fair.horizontal,
      awful.layout.suit.spiral,
      awful.layout.suit.spiral.dwindle,
      awful.layout.suit.max,
      awful.layout.suit.max.fullscreen,
      awful.layout.suit.magnifier
    }
#+END_SRC

定义主题
#+BEGIN_SRC lua :tangle "~/.config/awesome/theme.lua"
  ---------------------------
  -- Default awesome theme --
  ---------------------------

  theme = {}

  theme.font          = "sans 8"

  theme.bg_normal     = "#222222"
  theme.bg_focus      = "#535d6c"
  theme.bg_urgent     = "#ff0000"
  theme.bg_minimize   = "#444444"
  theme.bg_systray    = theme.bg_normal

  theme.fg_normal     = "#aaaaaa"
  theme.fg_focus      = "#ffffff"
  theme.fg_urgent     = "#ffffff"
  theme.fg_minimize   = "#ffffff"

  theme.border_width  = 1
  theme.border_normal = "#000000"
  theme.border_focus  = "#535d6c"
  theme.border_marked = "#91231c"

  -- There are other variable sets
  -- overriding the default one when
  -- defined, the sets are:
  -- taglist_[bg|fg]_[focus|urgent|occupied|empty]
  -- tasklist_[bg|fg]_[focus|urgent]
  -- titlebar_[bg|fg]_[normal|focus]
  -- tooltip_[font|opacity|fg_color|bg_color|border_width|border_color]
  -- mouse_finder_[color|timeout|animate_timeout|radius|factor]
  -- Example:
  --theme.taglist_bg_focus = "#ff0000"

  -- Display the taglist squares
  theme.taglist_squares_sel   = "/usr/share/awesome/themes/default/taglist/squarefw.png"
  theme.taglist_squares_unsel = "/usr/share/awesome/themes/default/taglist/squarew.png"

  -- Variables set for theming the menu:
  -- menu_[bg|fg]_[normal|focus]
  -- menu_[border_color|border_width]
  theme.menu_submenu_icon = "/usr/share/awesome/themes/default/submenu.png"
  theme.menu_height = 15
  theme.menu_width  = 100

  -- You can add as many variables as
  -- you wish and access them by using
  -- beautiful.variable in your rc.lua
  --theme.bg_widget = "#cc0000"

  -- Define the image to load
  theme.titlebar_close_button_normal = "/usr/share/awesome/themes/default/titlebar/close_normal.png"
  theme.titlebar_close_button_focus  = "/usr/share/awesome/themes/default/titlebar/close_focus.png"

  theme.titlebar_ontop_button_normal_inactive = "/usr/share/awesome/themes/default/titlebar/ontop_normal_inactive.png"
  theme.titlebar_ontop_button_focus_inactive  = "/usr/share/awesome/themes/default/titlebar/ontop_focus_inactive.png"
  theme.titlebar_ontop_button_normal_active = "/usr/share/awesome/themes/default/titlebar/ontop_normal_active.png"
  theme.titlebar_ontop_button_focus_active  = "/usr/share/awesome/themes/default/titlebar/ontop_focus_active.png"

  theme.titlebar_sticky_button_normal_inactive = "/usr/share/awesome/themes/default/titlebar/sticky_normal_inactive.png"
  theme.titlebar_sticky_button_focus_inactive  = "/usr/share/awesome/themes/default/titlebar/sticky_focus_inactive.png"
  theme.titlebar_sticky_button_normal_active = "/usr/share/awesome/themes/default/titlebar/sticky_normal_active.png"
  theme.titlebar_sticky_button_focus_active  = "/usr/share/awesome/themes/default/titlebar/sticky_focus_active.png"

  theme.titlebar_floating_button_normal_inactive = "/usr/share/awesome/themes/default/titlebar/floating_normal_inactive.png"
  theme.titlebar_floating_button_focus_inactive  = "/usr/share/awesome/themes/default/titlebar/floating_focus_inactive.png"
  theme.titlebar_floating_button_normal_active = "/usr/share/awesome/themes/default/titlebar/floating_normal_active.png"
  theme.titlebar_floating_button_focus_active  = "/usr/share/awesome/themes/default/titlebar/floating_focus_active.png"

  theme.titlebar_maximized_button_normal_inactive = "/usr/share/awesome/themes/default/titlebar/maximized_normal_inactive.png"
  theme.titlebar_maximized_button_focus_inactive  = "/usr/share/awesome/themes/default/titlebar/maximized_focus_inactive.png"
  theme.titlebar_maximized_button_normal_active = "/usr/share/awesome/themes/default/titlebar/maximized_normal_active.png"
  theme.titlebar_maximized_button_focus_active  = "/usr/share/awesome/themes/default/titlebar/maximized_focus_active.png"

  if file_exist_p("/home/lujun9972/.config/awesome/background.jpg") then
    theme.wallpaper = "/home/lujun9972/.config/awesome/background.jpg"
  else
    theme.wallpaper = "/usr/share/awesome/themes/default/background.png"
  end

  -- You can use your own layout icons like this:
  theme.layout_fairh = "/usr/share/awesome/themes/default/layouts/fairhw.png"
  theme.layout_fairv = "/usr/share/awesome/themes/default/layouts/fairvw.png"
  theme.layout_floating  = "/usr/share/awesome/themes/default/layouts/floatingw.png"
  theme.layout_magnifier = "/usr/share/awesome/themes/default/layouts/magnifierw.png"
  theme.layout_max = "/usr/share/awesome/themes/default/layouts/maxw.png"
  theme.layout_fullscreen = "/usr/share/awesome/themes/default/layouts/fullscreenw.png"
  theme.layout_tilebottom = "/usr/share/awesome/themes/default/layouts/tilebottomw.png"
  theme.layout_tileleft   = "/usr/share/awesome/themes/default/layouts/tileleftw.png"
  theme.layout_tile = "/usr/share/awesome/themes/default/layouts/tilew.png"
  theme.layout_tiletop = "/usr/share/awesome/themes/default/layouts/tiletopw.png"
  theme.layout_spiral  = "/usr/share/awesome/themes/default/layouts/spiralw.png"
  theme.layout_dwindle = "/usr/share/awesome/themes/default/layouts/dwindlew.png"

  theme.awesome_icon = "/usr/share/awesome/icons/awesome16.png"

  -- Define the icon theme for application icons. If not set then the icons 
  -- from /usr/share/icons and /usr/share/icons/hicolor will be used.
  theme.icon_theme = nil

  return theme
  -- vim: filetype=lua:expandtab:shiftwidth=4:tabstop=8:softtabstop=4:textwidth=80
#+END_SRC

设置壁纸
#+BEGIN_SRC lua
  -- Themes define colours, icons, font and wallpapers.
  beautiful.init("~/.config/awesome/theme.lua")
  --beautiful.init("/usr/share/awesome/themes/default/theme.lua")

  if beautiful.wallpaper then
      for s = 1, screen.count() do
          gears.wallpaper.maximized(beautiful.wallpaper, s, true)
      end
  end
#+END_SRC

Tags
#+BEGIN_SRC lua
  -- Define a tag table which hold all screen tags.
  tags = {}
  for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, s, layouts[1])
  end
#+END_SRC

Menu
#+BEGIN_SRC lua
  -- Create a laucher widget and a main menu
  myawesomemenu = {
    { "manual", emacsclient_newframe .. " -e '(man \"awesome\")'" },
    { "重建菜单", function ()
        os.execute("xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua" )
        awesome.restart()
    end},
    -- { "edit config", emacsclient_newframe .. awesome.conffile },
    { "edit config", emacsclient_newframe .. "~/github/dotfile/dotfile.org" },
    { "restart", awesome.restart },
    { "quit", awesome.quit }
  }
  -- 自动生成的xdg_menu
  xdg_menu = require("archmenu")

  mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                              { "Applications", xdgmenu },
                              { "Eshell", "eshell.sh"},
                              { "dired", "dired.sh" },
                              { "Firefox", "firefox" },
                              { "open terminal", terminal }
  }
                         })

  mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                       menu = mymainmenu })

  -- Menubar configuration
  menubar.utils.terminal = terminal -- Set the terminal for applications that require it
#+END_SRC

Wibox
#+BEGIN_SRC lua
  -- Create a textclock widget
  mytextclock = awful.widget.textclock()

  -- Create a wibox for each screen and add it
  mywibox = {}
  mypromptbox = {}
  mylayoutbox = {}
  mytaglist = {}
  mytaglist.buttons = awful.util.table.join(
    awful.button({ }, 1, awful.tag.viewonly),
    awful.button({ modkey }, 1, awful.client.movetotag),
    awful.button({ }, 3, awful.tag.viewtoggle),
    awful.button({ modkey }, 3, awful.client.toggletag),
    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
  )
  mytasklist = {}
  mytasklist.buttons = awful.util.table.join(
    awful.button({ }, 1, function (c)
        if c == client.focus then
          c.minimized = true
        else
          -- Without this, the following
          -- :isvisible() makes no sense
          c.minimized = false
          if not c:isvisible() then
            awful.tag.viewonly(c:tags()[1])
          end
          -- This will also un-minimize
          -- the client, if needed
          client.focus = c
          c:raise()
        end
    end),
    awful.button({ }, 3, function ()
        if instance then
          instance:hide()
          instance = nil
        else
          instance = awful.menu.clients({
              theme = { width = 250 }
          })
        end
    end),
    awful.button({ }, 4, function ()
        awful.client.focus.byidx(1)
        if client.focus then client.focus:raise() end
    end),
    awful.button({ }, 5, function ()
        awful.client.focus.byidx(-1)
        if client.focus then client.focus:raise() end
  end))

  for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                             awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                             awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                             awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                             awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })

    -- Widgets that are aligned to the left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(mylauncher)
    left_layout:add(mytaglist[s])
    left_layout:add(mypromptbox[s])

    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()
    if s == 1 then right_layout:add(wibox.widget.systray()) end
    right_layout:add(mytextclock)
    right_layout:add(mylayoutbox[s])

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)

    mywibox[s]:set_widget(layout)
  end
#+END_SRC

Mouse bindings
#+BEGIN_SRC lua
  root.buttons(awful.util.table.join(
                 awful.button({ }, 3, function () mymainmenu:toggle() end),
                 awful.button({ }, 4, awful.tag.viewnext),
                 awful.button({ }, 5, awful.tag.viewprev)
  ))
#+END_SRC

Key bindings
#+BEGIN_SRC lua
  globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
      function ()
        awful.client.focus.byidx( 1)
        if client.focus then client.focus:raise() end
    end),
    awful.key({ modkey,           }, "k",
      function ()
        awful.client.focus.byidx(-1)
        if client.focus then client.focus:raise() end
    end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
      function ()
        awful.client.focus.history.previous()
        if client.focus then
          client.focus:raise()
        end
    end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn("eshell.sh") end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
      function ()
        awful.prompt.run({ prompt = "Run Lua code: " },
          mypromptbox[mouse.screen].widget,
          awful.util.eval, nil,
          awful.util.getdir("cache") .. "/history_eval")
    end),
    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end)
  )

  clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
      function (c)
        -- The client currently has the input focus, so it cannot be
        -- minimized, since minimized clients can't have the focus.
        c.minimized = true
    end),
    awful.key({ modkey,           }, "m",
      function (c)
        c.maximized_horizontal = not c.maximized_horizontal
        c.maximized_vertical   = not c.maximized_vertical
    end)
  )

  -- Bind all key numbers to tags.
  -- Be careful: we use keycodes to make it works on any keyboard layout.
  -- This should map on the top row of your keyboard, usually 1 to 9.
  for i = 1, 9 do
    globalkeys = awful.util.table.join(globalkeys,
                                       -- View tag only.
                                       awful.key({ modkey }, "#" .. i + 9,
                                         function ()
                                           local screen = mouse.screen
                                           local tag = awful.tag.gettags(screen)[i]
                                           if tag then
                                             awful.tag.viewonly(tag)
                                           end
                                       end),
                                       -- Toggle tag.
                                       awful.key({ modkey, "Control" }, "#" .. i + 9,
                                         function ()
                                           local screen = mouse.screen
                                           local tag = awful.tag.gettags(screen)[i]
                                           if tag then
                                             awful.tag.viewtoggle(tag)
                                           end
                                       end),
                                       -- Move client to tag.
                                       awful.key({ modkey, "Shift" }, "#" .. i + 9,
                                         function ()
                                           if client.focus then
                                             local tag = awful.tag.gettags(client.focus.screen)[i]
                                             if tag then
                                               awful.client.movetotag(tag)
                                             end
                                           end
                                       end),
                                       -- Toggle tag.
                                       awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                                         function ()
                                           if client.focus then
                                             local tag = awful.tag.gettags(client.focus.screen)[i]
                                             if tag then
                                               awful.client.toggletag(tag)
                                             end
                                           end
    end))
  end

  clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

  -- Set keys
  root.keys(globalkeys)
#+END_SRC

Rules
#+BEGIN_SRC lua
    -- Rules to apply to new clients (through the "manage" signal).
    awful.rules.rules = {
      -- All clients will match this rule.
      { rule = { },
        properties = { border_width = beautiful.border_width,
                       border_color = beautiful.border_normal,
                       focus = awful.client.focus.filter,
                       raise = true,
                       keys = clientkeys,
                       buttons = clientbuttons } },
      { rule = { class = "MPlayer" },
        properties = { floating = true } },
      { rule = { class = "pinentry" },
        properties = { floating = true } },
      { rule = { class = "gimp" },
        properties = { floating = true } },
      { rule = { class = "Firefox" },
        properties = { floating = true } }
      -- Set Firefox to always map on tags number 2 of screen 1.
      -- { rule = { class = "Firefox" },
      --   properties = { tag = tags[1][2] } },
    }
#+END_SRC

Signals
#+BEGIN_SRC lua 
  -- Signal function to execute when a new client appears.
  client.connect_signal("manage", function (c, startup)
      -- Enable sloppy focus
      c:connect_signal("mouse::enter", function(c)
          if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
              and awful.client.focus.filter(c) then
              client.focus = c
          end
      end)

      if not startup then
          -- Set the windows at the slave,
          -- i.e. put it at the end of others instead of setting it master.
          -- awful.client.setslave(c)

          -- Put windows in a smart way, only if they does not set an initial position.
          if not c.size_hints.user_position and not c.size_hints.program_position then
              awful.placement.no_overlap(c)
              awful.placement.no_offscreen(c)
          end
      end

      local titlebars_enabled = false
      if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
          -- buttons for the titlebar
          local buttons = awful.util.table.join(
                  awful.button({ }, 1, function()
                      client.focus = c
                      c:raise()
                      awful.mouse.client.move(c)
                  end),
                  awful.button({ }, 3, function()
                      client.focus = c
                      c:raise()
                      awful.mouse.client.resize(c)
                  end)
                  )

          -- Widgets that are aligned to the left
          local left_layout = wibox.layout.fixed.horizontal()
          left_layout:add(awful.titlebar.widget.iconwidget(c))
          left_layout:buttons(buttons)

          -- Widgets that are aligned to the right
          local right_layout = wibox.layout.fixed.horizontal()
          right_layout:add(awful.titlebar.widget.floatingbutton(c))
          right_layout:add(awful.titlebar.widget.maximizedbutton(c))
          right_layout:add(awful.titlebar.widget.stickybutton(c))
          right_layout:add(awful.titlebar.widget.ontopbutton(c))
          right_layout:add(awful.titlebar.widget.closebutton(c))

          -- The title goes in the middle
          local middle_layout = wibox.layout.flex.horizontal()
          local title = awful.titlebar.widget.titlewidget(c)
          title:set_align("center")
          middle_layout:add(title)
          middle_layout:buttons(buttons)

          -- Now bring it all together
          local layout = wibox.layout.align.horizontal()
          layout:set_left(left_layout)
          layout:set_right(right_layout)
          layout:set_middle(middle_layout)

          awful.titlebar(c):set_widget(layout)
      end
  end)

  client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
  client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

#+END_SRC

配置自动启动,不过一般来说我比较喜欢直接写在.xinitrc中

#+BEGIN_SRC lua
  -- Autorun programs
  autorun = true
  autorunApps = 
    { 
      -- "ps -fu $(whoami)|grep \"emacs --daemon\"|grep -v grep || emacs --daemon"
    }

  if autorun then
    for app = 1, #autorunApps do
      awful.util.spawn_with_shell(autorunApps[app])
    end
  end
#+END_SRC
** Stumpwm 
:PROPERTIES:
:tangle:  ~/.stumpwmrc
:END:
#+BEGIN_SRC lisp 
  ;; vim:filetype=lisp
  (in-package :stumpwm)
  ;; 加载mode

  ;(set-contrib-dir "/usr/local/share/stumpwm")
  (mapcar #'load-module
    '("amixer"
      "cpu"
      "mem"
      "battery-portable"
      "net"
      "wifi"
      "disk"
      "app-menu"
      "stumptray"
      ;;"ttf-fonts"
      ))
  (set-prefix-key (kbd "F12"))      ;设置前缀键,已经在.xinitrc中定义Win为F12了
  ;; turn on debugging 0:disable
  (setf stumpwm::*debug-level* 0)
  ;(redirect-all-output (data-dir-file "debug-output" "txt"))

  ;(defun show-key-seq (key seq val)
  ;    (message (print-key-seq (reverse seq))))
  ;(add-hook *key-press-hook* 'show-key-seq)

  (defmacro replace-hook (hook fn)
      `(remove-hook ,hook ,fn)
      `(add-hook ,hook ,fn))

  ; If you like Meta (most probably alt on your keyboard) more than
  ; Super (which is the Windows key on mine), change 's-' into 'M-'.
  (defmacro defkey-top (key cmd)
      `(define-key *top-map* (kbd ,key) ,cmd))

  (defmacro defkeys-top (&rest keys)
      (let ((ks (mapcar #'(lambda (k) (cons 'defkey-top k)) keys)))
          `(progn ,@ks)))

  (defmacro defkey-root (key cmd)
      `(define-key *root-map* (kbd ,key) ,cmd))

  (defmacro defkeys-root (&rest keys)
      (let ((ks (mapcar #'(lambda (k) (cons 'defkey-root k)) keys)))
          `(progn ,@ks)))

  (defcommand display-current-window-info () ()
    "Shows the properties of the current window. These properties can be
  used for matching windows with run-or-raise or window placement
  -merules."
    (let ((w (current-window))
          (*suppress-echo-timeout* t)
          (nl (string #\NewLine)))

      ;; (message-no-timeout "class: ~a~%instance~a~%..." (window-class w) (window-res w) ...)
      (echo-string (current-screen)
                   (concat "class:    " (window-class w) nl
                           "instance: " (window-res w) nl
                           "type:     :" (string (window-type w)) nl
                           "role:     " (window-role w) nl
                           "title:    " (window-title w) nl
                           "width:    " (format nil "~a" (window-width w)) nl
                           "height    " (format nil "~a" (window-height w))))))

  ; 任何时候按下<s-c>就可以查单词， 非常方便！
  (defcommand dict (word) ((:rest "Word> "))
    (let ((cmd (format nil "dict ~a" word)))
      (with-output-to-string (*standard-output*)
       ,#+clisp(let ((str (ext:run-shell-command cmd :output :stream :wait nil)))
         (loop for line = (read-line str nil)
            until (null line)
            do (print line)))
       ,#+sbcl (sb-ext:run-program "/bin/sh" (list "-c" cmd) :input nil :output *standard-output*)
       ,#+ccl(ccl:run-program "/bin/sh" (list "-c" cmd) :input nil :output *standard-output*))))
  (set-fg-color "green")
  (set-bg-color "black")

  ;; 3.  安装字体： xfont-unifont
  ;;     这个字体是等宽字体，虽然中英文不能完全对齐，但显示效果很好，
  ;;     类似winxp。
  (set-font "*-unifont-medium-*-normal-*-16-*-*-*-*-*-*-*")
  ;; (set-font "-*-unifont-medium-i-normal-*-16-*-*-*-*-*-*-*")
  ;; suppress the message StumpWM displays when it starts. Set it to NIL
  (setf *startup-message* nil
        ,*suppress-frame-indicator* t
        ,*suppress-abort-messages* t
        ,*timeout-wait* 3
        ,*mouse-focus-policy* :click ;; :click, :ignore, :sloppy
        ,*message-window-gravity* :bottom-left
        ,*input-window-gravity* :bottom-left)

  ;;; Window Appearance
  (setf *normal-border-width* 1
        ,*maxsize-border-width* 1
        ,*transient-border-width* 1
        +default-frame-outline-width+ 1
        ,*float-window-title-height* 0
        ,*window-border-style* :thin) ; :thick :thin :tight :none

  (setf *time-modeline-string* "%Y-%m-%d %a ^B%l:%M^b" 
        ,*window-name-source* :title
        ;; *window-format* "^B^8*%n%s%m%15t | ^7*"
        ,*window-format* "%n%s%m%15t | "
        ,*group-format* "%t")

  (setf *chinese-day-names*
        '("一" "二" "三" "四" "五" "六" "日"))
  (defun current-date ()
    "Returns the date formatted as `2009-11-16 一 11:34:03'."
    (multiple-value-bind
    (second minute hour date month year day-of-week dst-p tz)
        (get-decoded-time)
      (format nil "~d-~2,'0d-~2,'0d ~a ^B~2,'0d:~2,'0d:~2,'0d^b"
        year month date (nth day-of-week *chinese-day-names*)
        hour minute second)))
   ;;;; The Mode Line
  (setf *mode-line-background-color* "black"
        ,*mode-line-foreground-color* "lightgreen"
        ,*mode-line-border-color* "black"
        ,*mode-line-border-width* 0
        ,*mode-line-pad-x* 0
        ,*mode-line-pad-y* 0
        ,*mode-line-timeout* 1 
      ;; *mode-line-position* :bottom
        ;; *screen-mode-line-format* (list "[%n]%W" "^>" '(:eval (current-date)))
      ,*screen-mode-line-format* (list
                   "^6*" '(:eval (current-date)) ; defined above
                   " | %D | %c(%f,%t) | %M | %l"
                   '(:eval (run-shell-command "echo" t))
                   "^2*" "[^B%n^b] %W"))

  ;; 定义mode-line的点击
  (defun show-params (mode-line button x y)
    (let ((mode-lin-content (mode-line-contents mode-line)) (mode-line-height (mode-line-height mode-line)))
    (message "mode-line:~a,~a"  x y))
    )
  (add-hook *mode-line-click-hook* 'show-params)
  ;; turn on/off the mode line for the current screen only.
  (if (not (head-mode-line (current-head)))
       (toggle-mode-line (current-screen) (current-head)))

  ;;add hook so I get notified when people say my name on IRC or IM me
  (defun echo-urgent-window (target)
      (message-no-timeout "~a has an message for you." (window-title target)))
  (add-hook *urgent-window-hook* 'echo-urgent-window)

  ;; shell program used by `run-shell-command' (`sh' by default, which is *not* 'bash' nor 'zsh')
  (setf *shell-program* (stumpwm::getenv "SHELL"))
  ;; (clear-window-placement-rules)

  (defun random-string (length)
    "Return a random string with LENGTH characters."
    (let ((alphabet (concat
         "abcdefghijklmnopqrstuvwxyz"
         "0123456789"
         "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
    (string (make-string length)))
      (map-into string (lambda (char)
             (declare (ignore char))
             (aref alphabet (random (length alphabet))))
          string)))

  (defun my-run-or-raise (cmd props &optional (all-groups *run-or-raise-all-groups*)
              (all-screens *run-or-raise-all-screens*))
    "若程序未运行,则运行程序,否则切换到该程序"
    (let* ((group (current-group))
     (frames (when (eq (type-of group) 'tile-group)
         (group-frames group))))
      (if (> (length frames) 1)
    (run-or-pull cmd props all-groups all-screens)
    (run-or-raise cmd props all-groups all-screens))))

  (defcommand firefox () ()
    "Start Firefox or switch to it, if it is already running."
    (my-run-or-raise "iceweasel" '(:class "Iceweasel")))

  (defcommand file-manager () ()
    "Start nautilus"
    (my-run-or-raise "nautilus --no-desktop" '(:class "Nautilus")))

  (defcommand foxit () ()
    (launch-crossover-app "FoxitReader" "FoxitReader"))

  (defcommand mplayer () ()
    (my-run-or-raise "smplayer" '(:class "Smplayer")))

  (defcommand lock-screen () ()
    (run-shell-command "exec xscreensaver-command -lock"))

  (defcommand dmenu-run () ()
    (run-shell-command "$(dmenu_path | dmenu -b)"))
  ;; 定义类Emacs的快捷键
  (defvar *my-ctrl-x-keymap*
    (let ((m (stumpwm:make-sparse-keymap)))
    (stumpwm:define-key m (stumpwm:kbd "o") "fnext")
    (stumpwm:define-key m (stumpwm:kbd "C-b") "frame-windowlist")
    (stumpwm:define-key m (stumpwm:kbd "b") "pull-window-by-number")
    (stumpwm:define-key m (stumpwm:kbd "C-c") "quit")
    (stumpwm:define-key m (stumpwm:kbd "k") "delete-window")
    (stumpwm:define-key m (stumpwm:kbd "K") "kill-window")
    (stumpwm:define-key m (stumpwm:kbd "1") "only")
    (stumpwm:define-key m (stumpwm:kbd "2") "vsplit")
    (stumpwm:define-key m (stumpwm:kbd "3") "hsplit")
    m))
  (stumpwm:define-key *root-map* (stumpwm:kbd "C-x") '*my-ctrl-x-keymap*)

  ;; 定义类似awesome的快捷键
  (defkey-top "M-TAB" "other-in-frame")
  (defkey-top "s-j" "next-in-frame")
  (defkey-top "s-k" "prev-in-frame")
  (defkey-top "s-r" "dmenu-run")
  ;; (defkey-top "s-r" "run-shell-command")
  (defkey-top "s-q" "quit")
  (defkey-root "M-x" "colon")
  (defkey-top "s-RET" "exec x-terminal-emulator")
  (defkey-root "f" "file-manager")
 
  ;; 定义声音
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Front-1-")
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Front-1+")
  (define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle pulse")

  ;; 定义s-Fn为切换到第n个group
  (defkey-top "s-F1" "gselect 1")
  (defkey-top "s-F2" "gselect 2")
  (defkey-top "s-F3" "gselect 3")
  (defkey-top "s-F4" "gselect 4")
  (defkey-top "s-F5" "gselect 5")

  ;; 定义s-n为切换到第n个window
  (defkey-top "s-`" "select-window-by-number 0")
  (defkey-top "s-1" "select-window-by-number 1")
  (defkey-top "s-2" "select-window-by-number 2")
  (defkey-top "s-3" "select-window-by-number 3")
  (defkey-top "s-4" "select-window-by-number 4")
  (defkey-top "s-5" "select-window-by-number 5")
  (defkey-top "s-5" "select-window-by-number 6")
  (defkey-top "s-5" "select-window-by-number 7")
  (defkey-top "s-5" "select-window-by-number 8")
  (defkey-top "s-5" "select-window-by-number 9")


  (run-commands "stumptray")
  (run-shell-command "~/.nutstore/dist/bin/nutstore-pydaemon.py")
  (run-shell-command "xset b off")
  (run-shell-command "xfce4-power-manager")
  (run-shell-command "xscreensaver -no-splash")
  (run-shell-command "nm-applet")
  (run-shell-command "volti")

#+END_SRC
* bash登陆相关配置
** bash_profile
#+BEGIN_SRC sh :tangle "~/.bash_profile"
  #
  # ~/.bash_profile
  #

  # ps -fu $(whoami)|grep "emacs --daemon"|grep -v grep || LC_ALL=zh_CN.UTF-8 emacs --daemon &

  # NO BEEP
  setterm -blength 0

  [[ -f ~/.bashrc ]] && . ~/.bashrc
  export PATH=~/bin:$PATH

  # Auto load scripts in ~/bin/autoload
  LOG_FILE=/tmp/info.log
  ERR_FILE=/tmp/error.log
  if [ -d ~/bin/autoload ];then
      source ~/bin/autoload/* >$LOG_FILE 2>$ERR_FILE
  fi

  function command_exist_p()
  {
      which $1 >/dev/null 2>/dev/null
  }

  if command_exist_p fbterm && command_exist_p fcitx-fbterm ;then
      # 启动fbterm
      fcitx-fbterm-helper -l
      # fbterm -i fcitx-fbterm
  else
      # 自动启用X，如果希望在 X 会话终止时保持登入状态，删除 exec
      [ -z "$DISPLAY" -a "$(fgconsole)" -eq 1 ] && exec startx
  fi
#+END_SRC
** bashrc
#+BEGIN_SRC sh :tangle "~/.bashrc"
  #
  # ~/.bashrc
  #
  # If not running interactively, don't do anything
  [[ $- != *i* ]] && return

  alias "vi=vim"
  alias ls='ls --color=auto'
  PS1='[\u@\h \W]\$ '
#+END_SRC
* X相关配置
** xinitrc
#+BEGIN_SRC sh :tangle "~/.xinitrc"
  # NO BEEP
  xset -b

  # setup fcitx
  export GTK_IM_MODULE=fcitx
  export QT_IM_MODULE=fcitx
  export XMODIFIERS="@im=fcitx"
  export LANG=zh_CN.UTF-8
  fcitx

  # RUN emacs --daemon
  ps -fu $(whoami)|grep "emacs --daemon"|grep -v grep || emacs --daemon &

  # 屏幕保护程序
  # xscreensaver &

  # xmodmap -e "remove Lock = Caps_Lock"
  # xmodmap -e "keysym Caps_Lock = Super_R"
  # xmodmap -e "keysym XF86WakeUp = Super_R"
  exec awesome
#+END_SRC
* 将Caps_Ctrl换成Win键
对于X41这种不带Win键，但是awesome没有Win键是很难用的。可以按照下面步骤来将Caps_Lock换成Win键

#+BEGIN_SRC sh
  xmapmode -pke > ~/.Xmodmap
  echo "remove Lock = Caps_Lock" >> ~/.Xmodmap
  echo "keysym Caps_Lock = Super_R" >> ~/.Xmodmap
#+END_SRC
