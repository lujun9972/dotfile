#+TITLE: dotfile
#+AUTHOR: lujun9972
#+CATEGORY: dotfile
#+DATE: [2016-10-20 四 08:08]
#+OPTIONS: ^:{}
#+PROPERTY: header-args :comments link :tangle-mode (identity #o444) :mkdirp yes

* 窗口管理器配置
** Awesome WM
*** 设定Lua程序使用的locale
设定locale可以影响时间的显示格式
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  os.setlocale("zh_CN.UTF-8")
#+END_SRC
*** 加载Awesome API library
Awesome API分布在多个库中，需要一一加载才能用. 这些库包括:

+ gears :: 常用的工具
+ wibox :: Awesome的widget框架
+ awful :: window managment方面的功能
+ naughty :: 有关通知的功能
+ menubar :: XDG menu相关实现
+ beautiful :: Awesome主题相关的功能
               
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  -- Standard awesome library
  local gears = require("gears")
  local awful = require("awful")
  require("awful.autofocus")
  -- Widget and layout library
  local wibox = require("wibox")
  -- Theme handling library
  local beautiful = require("beautiful")
  -- Notification library
  local naughty = require("naughty")
  local menubar = require("menubar")
  local hotkeys_popup = require("awful.hotkeys_popup").widget
  -- Enable VIM help for hotkeys widget when client with matching name is opened:
  require("awful.hotkeys_popup.keys.vim")
  -- 启用awesome-cli功能
  require("awful.remote")
  require("awful.autofocus")
  require("awful.dbus")
#+END_SRC

*** 自定义一些函数
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  local function client_menu_toggle_fn()
    local instance = nil

    return function ()
      if instance and instance.wibox.visible then
        instance:hide()
        instance = nil
      else
        instance = awful.menu.clients({ theme = { width = 250 } })
      end
    end
  end
#+END_SRC

**** 自定义客户化的作用域
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  customization = {}
  customization.config = {}
  customization.orig = {}
  customization.func = {}
  customization.default = {}
  customization.option = {}
  customization.timer = {}
  customization.widgets = {}
#+END_SRC

**** 判定命令是否存在
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  function customization.func.command_exist_p(cmd)
     return os.execute("command -v " .. cmd)
  end
#+END_SRC

**** 调整透明度
=Mod4+]= 减少透明度， =Mod4+[= 增加透明度，但修改透明度之前要运行 =composite manager=, 可选的composite manager有
+ compton
+ xcompmgr
+ unagi
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  customization.default.property = {
    layout = awful.layout.suit.floating,
    min_opacity = 0.4,
    max_opacity = 1,
  }

  customization.default.compmgr = 'xcompmgr'
  customization.default.compmgr_args = '-f -c -s'
  if customization.func.command_exist_p(customization.default.compmgr) then
    customization.func.client_opaque_less = function (c)
      local opacity = c.opacity - 0.1
      if opacity and opacity >= customization.default.property.min_opacity then
        c.opacity = opacity
      end
    end

    customization.func.client_opaque_more = function (c)
      local opacity = c.opacity + 0.1
      if opacity and opacity <= customization.default.property.max_opacity then
        c.opacity = opacity
      end
    end

    customization.func.client_opaque_off = function (c)
      awful.util.spawn_with_shell("pkill " .. customization.default.compmgr)
    end

    customization.func.client_opaque_on = function (c)
      awful.util.spawn_with_shell(customization.default.compmgr.. " " .. customization.default.compmgr_args)
    end

    customization.func.client_opaque_off() -- 关闭以前的opague
    customization.func.client_opaque_on()

  end
#+END_SRC

**** 调整音量
使用amixer命令可以调整音量
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  function customization.func.lower_volume()
     awful.util.spawn("amixer -q -D pulse sset Master 5%-")
  end

  function customization.func.raise_volume()
     awful.util.spawn("amixer -q -D pulse sset Master 5%+")
  end

  function customization.func.mute_volume()
     awful.util.spawn("amixer -q -D pulse sset Master 1+ toggle")
  end
#+END_SRC
**** 锁屏
使用 =Mod4+l= 进行锁屏，默认通过命令 =xscreensaver-command -lock= 来实现，不过也可以改成用 =xlock=
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  customization.default.xlock = 'xscreensaver-command'
  customization.default.xlock_args = '-lock'
  function customization.func.lock_screen()
    awful.util.spawn_with_shell(customization.default.xlock .. " " .. customization.default.xlock_args)
  end
#+END_SRC

**** 保存窗口截屏
+ 使用Mod4+Print截取当前窗口屏幕
+ 使用Mod4+Shift+Print选择要截取的窗口
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  function customization.func.take_client_screen(c,path)
    if not c then
      local terms = { theme = { width = 250 } }
      for i,c in ipairs(client.get()) do
        terms[i] = {c.name,
                    function() customization.func.take_client_screen(c, path) end,
                    c.icon
        }
      end
      awful.menu(terms):show()
    else
      path = path or string.format("%s_%d.png", c.class or c.name, os.time())
      gears.surface(c.content):write_to_png(path)
      naughty.notify{text=string.format("截屏保存在:%s",path),icon=c.icon}
    end
  end
#+END_SRC
**** 读取Emacs中的bookmark，形成菜单
+ 若bookmark为文件则用xdg-open打开
+ 若bookmark为目录，则打开terminal，进入该目录
  
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  function customization.func.open_emacs_bookmark()
    local ret = awful.spawn.easy_async([[emacsclient --eval "(progn
      (require 'bookmark)
      (bookmark-maybe-load-default-file)
      (mapcar 'file-truename (mapcar 'bookmark-get-filename bookmark-alist)))"]],
      function (stdout,stderr,exitreason,exitcode)
        local emacs_bookmark_menu = { theme = { width = 250 } }
        for path in string.gmatch(stdout, '"([^"]+)"') do
          local composes = gears.string.split(path,'/')
          local name = composes[#composes]
          if name == "" or name == " " then
            name = composes[#composes - 1]
          end
          if gears.filesystem.is_dir(path) then
            table.insert(emacs_bookmark_menu, {name, "urxvt -cd " .. path}) -- 由于每个terminal设置默认目录的方法都不一样，因此这里写死terminal
          else
            table.insert(emacs_bookmark_menu, {name, "xdg-open " .. path})
          end
        end
        awful.menu(emacs_bookmark_menu):show()
      end)
    if type(re) == "string" then
      naughty.notify{text=tostring(ret)}
    end
  end
#+END_SRC
*** 错误处理
错误可能会有以下几类：

+ 语法错误 :: 使用 =awesome -k= 来检查配置文件中是否存在语法错误
+ 动态语言类型错误 :: 可以使用 =luacheck= 来进行静态扫描
+ 废弃的API :: 若调用了废弃的API，则会在 =stderr= 和 =stdout= 中输出警告信息
            
=awesome.startup_errors= 中包含的是awesome启动期间的错误信息
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  -- Check if awesome encountered an error during startup and fell back to
  -- another config (This code will only ever execute for the fallback config)
  if awesome.startup_errors then
      naughty.notify({ preset = naughty.config.presets.critical,
                       title = "Oops, there were errors during startup!",
                       text = awesome.startup_errors })
  end
#+END_SRC

=awesome.connect_signal(event,func)= 来注册当时间发生时调用哪个函数，其中
+ event为字符串形式的时间名称
+ func为触发调用的函数
  
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  -- Handle runtime errors after startup
  do
      local in_error = false
      awesome.connect_signal("debug::error", function (err)
          -- Make sure we don't go into an endless error loop
          if in_error then return end
          in_error = true

          naughty.notify({ preset = naughty.config.presets.critical,
                           title = "Oops, an error happened!",
                           text = tostring(err) })
          in_error = false
      end)
  end
#+END_SRC
*** 加载主题
=beautiful.init(config)= 函数初始化主题

其中 =config= 可以是一个字符串路径指向主题文件(这个主题文件的执行结果应该是一个包含各类主题变量与值的table)，或者直接就是一个table对象

使用 =beautiful.get()= 函数就能得到当前主题对象

与设置主题相关的变量有：

+ font :: 默认的字体
+ useless_gap :: 程序与程序之间的间距大小，默认为0
+ border_width :: 程序边框宽度
+ border_normal :: 程序边框的默认宽度.
+ border_focus :: 焦点所在程序的边框框读
+ wallpaper :: 壁纸的路径
+ awesome_icon :: Awesome图标的路径

#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  -- Themes define colours, icons, font and wallpapers.
  beautiful.init(awful.util.get_themes_dir() .. "default/theme.lua")
  -- beautiful.init("~/.config/awesome/theme.lua")
#+END_SRC
*** 定义一些变量
定义终端、默认编辑器
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  -- This is used later as the default terminal and editor to run.
  terminal = "urxvt"
  editor = os.getenv("EDITOR") or "vi"
  editor_cmd = terminal .. " -e " .. editor
  emacsclient_newframe = "emacsclient -a \"\" -n -c "
#+END_SRC

设置默认的modkey
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  -- Default modkey.
  -- Usually, Mod4 is the key with a logo between Control and Alt.
  -- If you do not like this or do not have such a key,
  -- I suggest you to remap Mod4 to another key using xmodmap or other tools.
  -- However, you can use another modifier like Mod1, but it may interact with others.
  modkey = "Mod4"
#+END_SRC

定义可用的布局
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  -- Table of layouts to cover with awful.layout.inc, order matters.
  awful.layout.layouts = {
      awful.layout.suit.floating,
      awful.layout.suit.tile,
      awful.layout.suit.tile.left,
      awful.layout.suit.tile.bottom,
      awful.layout.suit.tile.top,
      awful.layout.suit.fair,
      awful.layout.suit.fair.horizontal,
      awful.layout.suit.spiral,
      awful.layout.suit.spiral.dwindle,
      awful.layout.suit.max,
      awful.layout.suit.max.fullscreen,
      awful.layout.suit.magnifier,
      awful.layout.suit.corner.nw,
      -- awful.layout.suit.corner.ne,
      -- awful.layout.suit.corner.sw,
      -- awful.layout.suit.corner.se,
  }
#+END_SRC
*** Menu
自定义菜单，其中一个菜单就是一个包含菜单项的数组。

而一个菜单项可以是：一个菜单或一个形如 ={菜单项名称,菜单项对应的函数或命令字符串[,菜单项图标]}=, 其中 =菜单项图标= 可以省略。
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  -- Create a launcher widget and a main menu
  myawesomemenu = {
     { "hotkeys", function() return false, hotkeys_popup.show_help end},
     { "manual", emacsclient_newframe .. " -e '(man \"awesome\")'" },
     { "重建菜单", function ()
         os.execute("xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua" )
         awesome.restart()
     end},
     -- { "edit config", emacsclient_newframe .. awesome.conffile },
     { "edit config", emacsclient_newframe .. "~/github/dotfile/dotfile.org" },
     -- { "manual", terminal .. " -e man awesome" },
     -- { "edit config", editor_cmd .. " " .. awesome.conffile },
     { "restart", awesome.restart },
     { "quit", function() awesome.quit() end}
  }

  -- 自动生成的xdg_menu
  xdg_menu = require("archmenu")
  mainmenu_items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
    { "Applications", xdgmenu },
    { "Eshell", [[emacsclient -c --eval "(progn
                                            (eshell 'new)
                                            (delete-other-windows))"]]},
    { "dired", "dired.sh" },
    { "Firefox", "firefox" },
    { "open terminal", terminal }
  }

  if customization.func.client_opaque_on then
    table.insert(mainmenu_items,{"opaque on", customization.func.client_opaque_on})
  end

  if customization.func.client_opaque_off then
    table.insert(mainmenu_items,{"opaque off", customization.func.client_opaque_off})
  end
#+END_SRC

awful.menu:new(args,parent)用于生成menu对象，其中 =args= 是一个table，包含了menu的各项信息，该table可以具有以下三种key值:

+ items :: 必填，表示menu内容的table，格式如前所说
+ theme.[fg|bg][focus|normal], theme.bordercolor, theme.borderwidth, theme.submenuicon, theme.height , theme.width :: 可选，定义了menu的显示方法
+ auto_expand :: 定义是否自动弹出子菜单，默认为true,表示光标移动过去就自动弹出子菜单
                 
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  mymainmenu = awful.menu({ items = mainmenu_items
                          })
#+END_SRC
                 
awful.widget.launcher:new (args)函数创建一个button widget，点击之后执行特点的命令。

参数 =args= 是一个table,该table除了能包含标准widget table的那些参数外，还能有以下key值

+ image :: 图片的路径，该图片用于显示该button widget的外观
+ command :: 指定点击widget后运行的命令
+ menu :: 指定点击widget后要弹出的菜单
          
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  mylauncher= awful.widget.launcher({ image = beautiful.awesome_icon,
                                       menu = mymainmenu })

  -- 启动emacs
  emacslauncher = awful.widget.launcher({ image = "/usr/share/icons/hicolor/128x128/apps/emacs.png",
  command = "/usr/bin/emacsclient -a '' -n -c"})

  -- 随机从reddit中选择一副壁纸
  wallpaperlauncher = awful.widget.launcher({ image = "/usr/share/icons/Adwaita/256x256/apps/preferences-desktop-screensaver.png",
                                              command = os.getenv("HOME") .. "/bin/reddit_wallpaper.sh"})

#+END_SRC

menubar.utils.terminal指定了当应用需要在终端运行时，打开哪个终端
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  menubar.utils.terminal = terminal -- Set the terminal for applications that require it
#+END_SRC

awful.widget.keyboardlayout:new ()创建一个键盘布局的widget,用于显示当前的键盘布局
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  -- Keyboard map indicator and switcher
  mykeyboardlayout = awful.widget.keyboardlayout()
#+END_SRC
*** Wibar

**** 显示当前时间widget
~wibox.widget.textclock ([format[, timeout[, timezone]]])~ 创建一个textclock widget，用于显示时间。其中

+ format :: 指明时间的格式，默认为"%a %b %d"
+ timeout :: 指定多少秒更新一次时间，默认为60
+ timezone :: 指明时区默认为本地时区
              
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  -- Create a textclock widget
  mytextclock = wibox.widget.textclock()
#+END_SRC
**** 显示holiday信息
~awful.widget.watch:new (command[, timeout=5][, callback], base_widget)~ 返回一个watch widget以及对应的gears.timer，其中

+ command为定时执行的命令
+ timeout为定时执行命令的时间间隔秒数,默认为5秒执行一次command
+ callback为回调函数，默认为
  #+BEGIN_SRC lua
    function(widget, stdout, stderr, exitreason, exitcode)
      widget:set_text(stdout)
    end

    -- widget: watch widget本身
    -- stdout: command的标准输出字符串
    -- stderr: command的标准错误输出字符串
    -- exitreason: command退出的原因，可以是"exit"表示正常退出 或 "signal"表示收到信号导致退出.
    -- exitcode: 退出码. 若是正常退出("exit")则为command的exit code. 若是收到信号退出("signal")则是导致进程退出的信号量
  #+END_SRC
+ base_widget为父类widget，默认为wibox.widget.textbox()
  

#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  -- 使用watch widget查看holiday信息
  customization.widgets.holiday_watcher,customization.timer.holiday_timer = awful.widget.watch([[emacsclient -e '
    (let* ((date (calendar-current-date))
           (holiday-list (calendar-check-holidays date)))
       (intern (string-join holiday-list ";  ")))']],60)
  #+END_SRC
**** 显示当前emms播放的音乐
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  -- 使用watch widget查看emms播放的内容
  customization.widgets.emms_watcher,customization.widgets.emms_timer = awful.widget.watch([[emacsclient -e '(when emms-player-playing-p
                    (intern(format emms-show-format 
                              (emms-track-description 
                                (emms-playlist-current-selected-track)))))']],2)
  #+END_SRC
**** 显示Battery状态
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  -- 使用watch widget查看battery状态
  customization.widgets.battery_watcher,customization.widgets.battery_timer = awful.widget.watch([[bash -c 'cd /sys/class/power_supply;
    ACChargeState=$(grep "POWER_SUPPLY_ONLINE=" [Aa][Cc]/uevent|cut -d= -f2);
    BatteryCapacity=$(grep "POWER_SUPPLY_CAPACITY=" [Bb][Aa][Tt][0-9]/uevent |cut -d= -f2);
    test "${ACChargeState}" -eq "1" && ChargeState="AC" || ChargeState="Bat";
    echo "${ChargeState} ${BatteryCapacity}%";']],60)
  #+END_SRC
**** 定义点击tag的行为
=gears.table.join(tables)= 会遍历参数中的所有table中的key，插入成一个新的table

而awful.button:new (mod, _button, press[, release])方法创建一个可以点击的按钮table，其中

+ mod :: 定义鼠标点击时，一同按下哪个modifer
+ _button :: 定义了用哪个鼠标键进行点击操作
+ press :: 定义了点击按下时运行的函数
+ release :: 定义了点击释放时运行的函数
             
需要说明的是， =awful.button:new= 会根据 =awful.button.ignore_modifiers= 的值来生成多个版本的button对象。
比如，默认 =awful.button.ignore_modifiers= 会忽略  ={ "Lock", "Mod2" }= 这两个按键，那么 =awful.button:new= 会生成4个button object，分别对应没有按下 ={ "Lock", "Mod2" }= 的情况，按下 ={ "Lock", "Mod2" }= 的情况， 按下 ={ "Lock"}=  的情况和按下 ={ "Mod2"}= 的情况.
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  -- Create a wibox for each screen and add it
  local taglist_buttons = gears.table.join(

    -- 点击左键，切换到该tag
    awful.button({ }, 1, function(t) t:view_only() end), 
    -- modkey+左键，将当前window移动到指定tag
    awful.button({ modkey }, 1, function(t)
        if client.focus then
          client.focus:move_to_tag(t)
        end
    end),
    -- 点击右键，让指定tag也可见
    awful.button({ }, 3, awful.tag.viewtoggle),
    -- modkey+右键，让当前window在指定tag也可见
    awful.button({ modkey }, 3, function(t)
        if client.focus then
          client.focus:toggle_tag(t)
        end
    end),
    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
  )
#+END_SRC
**** 定义点击任务栏的行为
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  local tasklist_buttons = gears.table.join(
    awful.button({ }, 1, function (c)
        if c == client.focus then
          c.minimized = true
        else
          -- Without this, the following
          -- :isvisible() makes no sense
          c.minimized = false
          if not c:isvisible() and c.first_tag then
            c.first_tag:view_only()
          end
          -- This will also un-minimize
          -- the client, if needed
          client.focus = c
          c:raise()
        end
    end),
    awful.button({ }, 3, client_menu_toggle_fn()),
    awful.button({ }, 4, function ()
        awful.client.focus.byidx(1)
    end),
    awful.button({ }, 5, function ()
        awful.client.focus.byidx(-1)
  end))
#+END_SRC
**** 当屏幕发生改变时，重新设置壁纸
~gears.wallpaper.maximized(surf, s, ignore_aspect, offset)~ 以最大化的方式设置壁纸，其中

+ surf :: 要设置的壁纸
+ s :: 在哪个屏幕中设置该壁纸
+ ignore_aspect :: 是否忽略长宽比，默认为否
+ offset :: 设置壁纸的偏移量

除了 =maximized= 这种壁纸设置方法外，还有其他的设置方法：

+ centered (surf, s, background, scale)
+ tiled (surf, s, offset)
+ fit (surf, s, background)
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  local function set_wallpaper(s,wallpaper)
      -- Wallpaper
      if beautiful.wallpaper then
          wallpaper = wallpaper or beautiful.wallpaper
          -- If wallpaper is a function, call it with the screen
          if type(wallpaper) == "function" then
              wallpaper = wallpaper(s)
          end
          gears.wallpaper.maximized(wallpaper, s, true)
      end
  end

  -- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
  screen.connect_signal("property::geometry", set_wallpaper)
#+END_SRC

**** 设置屏幕布局
~awful.screen.connect_for_each_screen (func)~ 为每个已存在的，且后面新创建的屏幕都调用 =func=, 其中 =func= 接受一个 =screen= 作为参数
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
   awful.screen.connect_for_each_screen(function(s)
       -- Wallpaper
       set_wallpaper(s)

       -- Each screen has its own tag table.
       awful.tag({ "1.HOME", "2.STUDIO", "3.GAMES", "4.EDIT", "5.VM", "6.IRC"}, s, awful.layout.layouts[1])

       -- Create a promptbox for each screen
       s.mypromptbox = awful.widget.prompt()
       -- Create an imagebox widget which will contains an icon indicating which layout we're using.
       -- We need one layoutbox per screen.
       s.mylayoutbox = awful.widget.layoutbox(s)
       s.mylayoutbox:buttons(gears.table.join(
                              awful.button({ }, 1, function () awful.layout.inc( 1) end),
                              awful.button({ }, 3, function () awful.layout.inc(-1) end),
                              awful.button({ }, 4, function () awful.layout.inc( 1) end),
                              awful.button({ }, 5, function () awful.layout.inc(-1) end)))
       -- Create a taglist widget
       s.mytaglist = awful.widget.taglist(s, awful.widget.taglist.filter.all, taglist_buttons)

       -- Create a tasklist widget
       s.mytasklist = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, tasklist_buttons)

       -- Create the wibox
       s.mywibox = awful.wibar({ position = "top", screen = s })

       -- Add widgets to the wibox
       s.mywibox:setup {
           layout = wibox.layout.align.horizontal,
           { -- Left widgets
               layout = wibox.layout.fixed.horizontal,
               mylauncher,
               emacslauncher,
               wallpaperlauncher,
               s.mytaglist,
               s.mypromptbox,
           },
           s.mytasklist, -- Middle widget
           { -- Right widgets
               layout = wibox.layout.fixed.horizontal,
               mykeyboardlayout,
               wibox.widget.systray(),
               customization.widgets.emms_watcher,
               wibox.widget.textbox('  |  '),
               customization.widgets.battery_watcher,
               wibox.widget.textbox('  |  '),
               mytextclock,
               customization.widgets.holiday_watcher,
               s.mylayoutbox,
           },
       }

       -- Create the todo wibox
       s.todo_wibox = awful.wibar({ position = "left", -- 在左边显示
                                    screen = s,
                                    stretch = true, -- 是否自动扩展以匹配屏幕,默认就是true
                                    window = "dock", -- A client attached to the side of the screen.
                                    visible = false, -- 
       })
       s.todo_wibox:setup{
         layout = wibox.layout.fixed.vertical,
         wibox.widget.textbox('todo1'),
         wibox.widget.textbox('todo2')
       }
   end)
#+END_SRC
*** 设置鼠标操作
**** 设置全局鼠标操作
全局鼠标操作是在root窗口进行鼠标操作时触发的操作，awesome不带任何参数调用对应的函数。

使用 ~root.buttons (button_table)~ 函数获取/设置全局的鼠标操作
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  root.buttons(gears.table.join(
      awful.button({ }, 3, function () mymainmenu:toggle() end),
      awful.button({ }, 4, awful.tag.viewnext),
      awful.button({ }, 5, awful.tag.viewprev)
  ))
#+END_SRC
**** 设置client鼠标操作

client鼠标操作是当有window获取到焦点时触发的操作，awesome将当前捕获到焦点的window作为参数传递给对应的函数。
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  clientbuttons = gears.table.join(
      awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
      awful.button({ modkey }, 1, awful.mouse.client.move),
      awful.button({ modkey }, 3, awful.mouse.client.resize))
#+END_SRC

client鼠标操作需要通client的buttons属性来设置，参见后面的Rules章节
*** 设置快捷键
每个快捷键都保存为一个key对象。

key对象通过 =awful.key:new (mod, _key, press[, release], data)= 来产生，其中

+ mod :: 为一个包含0个或多个modifier key的table。能作为modifier key的键有Mod1, Mod2, Mod3, Mod4, Mod5, Shift, Lock 和 Control.
+ _key :: 为触发事件的按键或键码(通过xev命令来获取)
+ press :: 按下快捷键调用的函数
+ release :: 释放快捷键时调用的函数
+ data :: 额外的元数据，提供给 =awful.hotkeys_popup= widget使用
          
需要说明的是: =awful.key:new= 函数返回的是一个包含一个或多个key对象的table,这也是为什么能用 =gears.table.join= 来整合的原因。

此外，类似 =awful.button=, =awful.key:new= 也会受到 =awful.key.ignore_modifiers= 的影响

**** 设置全局快捷
全局快捷键在任何情况下都可触发，当触发全局快捷键的函数时，awesome并不会传递任何参数

#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  globalkeys = gears.table.join(
    awful.key({},"XF86AudioLowerVolume",customization.func.lower_volume),
    awful.key({},"XF86AudioRaiseVolume",customization.func.raise_volume),
    awful.key({},"XF86AudioMute",customization.func.mute_volume),
    -- Mod4 + l :: 锁屏
    awful.key({modkey,            },"l",       customization.func.lock_screen
    ),
    awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
      {description="show help", group="awesome"}),
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
      {description = "view previous", group = "tag"}),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
      {description = "view next", group = "tag"}),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
      {description = "go back", group = "tag"}),

    awful.key({ modkey,           }, "j",
      function ()
        awful.client.focus.byidx( 1)
      end,
      {description = "focus next by index", group = "client"}
    ),
    awful.key({ modkey,           }, "k",
      function ()
        awful.client.focus.byidx(-1)
      end,
      {description = "focus previous by index", group = "client"}
    ),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
      {description = "show main menu", group = "awesome"}),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
      {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
      {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
      {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
      {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
      {description = "jump to urgent client", group = "client"}),
    awful.key({ modkey,           }, "Tab",
      function ()
        awful.client.focus.history.previous()
        if client.focus then
          client.focus:raise()
        end
      end,
      {description = "go back", group = "client"}),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
      {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey,  "Shift" }, "f", function () awful.spawn("nemo") end,
      {description = "open a file manager", group = "launcher"}),
    awful.key({ modkey, "Control" }, "r", awesome.restart,
      {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit,
      {description = "quit awesome", group = "awesome"}),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
      {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
      {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
      {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
      {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
      {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
      {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
      {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
      {description = "select previous", group = "layout"}),

    awful.key({ modkey, "Control" }, "n",
      function ()
        local c = awful.client.restore()
        -- Focus restored client
        if c then
          client.focus = c
          c:raise()
        end
      end,
      {description = "restore minimized", group = "client"}),

    -- Prompt,如果有安装rofi和dmenu,则使用rofi+dmenu，否则使用原生的prompt widget
    awful.key({ modkey },            "r",
      function ()
        awful.spawn.easy_async_with_shell("dmenu_path|rofi -dmenu",function (stdout,stderr,exitreason,exitcode)
                                            if exitcode == 127 then -- 127表示命令没找到
                                              awful.screen.focused().mypromptbox:run()
                                            else
                                              awful.spawn(terminal .. " -e " ..stdout)
                                            end
        end)
      end,
      {description = "run prompt", group = "launcher"}),

    -- awful.key({ modkey },            "r",     function () awful.screen.focused().mypromptbox:run() end,
    --   {description = "run prompt", group = "launcher"}),
    -- 使用rofi快速切换窗口，ssh链接，运行程序等，使用Ctrl-Tab切换mode
    awful.key({ modkey, "Shift" },            "r",
      function ()
        awful.spawn("rofi -modi 'ssh,combi,keys' -show ssh")
      end,
      {description = "run prompt", group = "launcher"}),

    awful.key({ modkey }, "x",
      function ()
        awful.prompt.run {
          prompt       = "Run Lua code: ",
          textbox      = awful.screen.focused().mypromptbox.widget,
          exe_callback = awful.util.eval,
          history_path = awful.util.get_cache_dir() .. "/history_eval"
        }
      end,
      {description = "lua execute prompt", group = "awesome"}),

    -- modkey+m 用emacs查看man entry
    awful.key({ modkey }, "m",
      function ()
        awful.prompt.run {
          prompt       = "Manual Entry: ",
          textbox      = awful.screen.focused().mypromptbox.widget,
          exe_callback = function (entry)
            if not entry or #entry == 0 then return end
            local command=string.format([[emacsclient -n -c -e '(progn (man "%s")
            (delete-window)
              (local-set-key (kbd "C-x C-c")
                      (lambda ()
                          (interactive)
                          (kill-this-buffer)
                          (save-buffers-kill-terminal t))))']],entry)
            awful.spawn.with_shell(command)
          end,
          history_path = awful.util.get_cache_dir() .. "/history_man"
        }
      end,
      {description = "lua execute prompt", group = "awesome"}),
    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end,
      {description = "show the menubar", group = "launcher"}),

    -- emacs bookmark
    awful.key({ modkey }, "b", customization.func.open_emacs_bookmark,
      {description = "显示Emacs Bookmark", group = "emacs"}),
    -- 保存client屏幕
    awful.key({ modkey,  "Shift"}, "Print", customization.func.take_client_screen,
      {description = "保存client屏幕", group = "client"})
  )

  -- Bind all key numbers to tags.
  -- Be careful: we use keycodes to make it work on any keyboard layout.
  -- This should map on the top row of your keyboard, usually 1 to 9.
  for i = 1, 9 do
    globalkeys = gears.table.join(globalkeys,
                                  -- View tag only.
                                  awful.key({ modkey }, "#" .. i + 9,
                                    function ()
                                      local screen = awful.screen.focused()
                                      local tag = screen.tags[i]
                                      if tag then
                                        tag:view_only()
                                      end
                                    end,
                                    {description = "view tag #"..i, group = "tag"}),
                                  -- Toggle tag display.
                                  awful.key({ modkey, "Control" }, "#" .. i + 9,
                                    function ()
                                      local screen = awful.screen.focused()
                                      local tag = screen.tags[i]
                                      if tag then
                                        awful.tag.viewtoggle(tag)
                                      end
                                    end,
                                    {description = "toggle tag #" .. i, group = "tag"}),
                                  -- Move client to tag.
                                  awful.key({ modkey, "Shift" }, "#" .. i + 9,
                                    function ()
                                      if client.focus then
                                        local tag = client.focus.screen.tags[i]
                                        if tag then
                                          client.focus:move_to_tag(tag)
                                        end
                                      end
                                    end,
                                    {description = "move focused client to tag #"..i, group = "tag"}),
                                  -- Toggle tag on focused client.
                                  awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                                    function ()
                                      if client.focus then
                                        local tag = client.focus.screen.tags[i]
                                        if tag then
                                          client.focus:toggle_tag(tag)
                                        end
                                      end
                                    end,
                                    {description = "toggle focused client on tag #" .. i, group = "tag"})
    )
  end
#+END_SRC

使用 =root.keys(keys_array)= 来获取/设置全局的快捷方式
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  root.keys(globalkeys)
#+END_SRC
**** 设置client快捷键
client快捷键是当有焦点在window(client)上时才能触发的。这时awesome调用快捷键上的函数时会将当前client作为参数传递过去。
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  clientkeys = gears.table.join(
    awful.key({ modkey,           }, "f",
      function (c)
        c.fullscreen = not c.fullscreen
        c:raise()
      end,
      {description = "toggle fullscreen", group = "client"}),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end,
      {description = "close", group = "client"}),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
      {description = "toggle floating", group = "client"}),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
      {description = "move to master", group = "client"}),
    awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
      {description = "move to screen", group = "client"}),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
      {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey,           }, "n",
      function (c)
        -- The client currently has the input focus, so it cannot be
        -- minimized, since minimized clients can't have the focus.
        c.minimized = true
      end ,
      {description = "minimize", group = "client"}),
    awful.key({ modkey,           }, "m",
      function (c)
        c.maximized = not c.maximized
        c:raise()
      end ,
      {description = "(un)maximize", group = "client"}),
    awful.key({ modkey, "Control" }, "m",
      function (c)
        c.maximized_vertical = not c.maximized_vertical
        c:raise()
      end ,
      {description = "(un)maximize vertically", group = "client"}),
    awful.key({ modkey, "Shift"   }, "m",
      function (c)
        c.maximized_horizontal = not c.maximized_horizontal
        c:raise()
      end ,
      {description = "(un)maximize horizontally", group = "client"}),

    awful.key({ modkey, }, "[", customization.func.client_opaque_less,
      {description = "减少透明度", group = "client"}),

    awful.key({ modkey, }, "]", customization.func.client_opaque_more,
      {description = "增加透明度", group = "client"}),

    awful.key({ modkey,}, "Print", customization.func.take_client_screen,
      {description = "保存当前client屏幕", group = "client"})
  )
#+END_SRC

client快捷键需要通过对client的keys属性来进行设置(参见Rules章节)
*** Rules
=awful.rules.rules= 是全局的规则表，这里定义的规则适用于所有新开的window。

一个规则由 =rule= / =rule_any= ， =except= / =except_any= , =properties= / =callback= 组成，其中:

+ =rule= 定义了条件,其中的条件都必须满足才能满足该rule
+ =rule_any= 定义了条件,其中的条件只需要满足一个就能满足该rule
+ =except= / =except_any= 定义了符合rule但需要排除掉的那些特殊情况
+ =properties= 定义了client的属性,若属性值为函数，则该函数的返回值会作为属性的值。
+ =callback= 定义了触发的回调函数,该回调函数会接受打开的client作为参数

属性是可以任意的，但下面的属性有特殊的意义

+ placement
+ honor_padding
+ honor_workarea
+ tag
+ new_tag
+ switchtotag
+ focus
+ titlebars_enabled
+ callback
+ keys
+ buttons

  
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  -- Rules to apply to new clients (through the "manage" signal).
  awful.rules.rules = {
      -- All clients will match this rule.
      { rule = { },
        properties = { border_width = beautiful.border_width,
                       border_color = beautiful.border_normal,
                       focus = awful.client.focus.filter,
                       raise = true,
                       keys = clientkeys,
                       buttons = clientbuttons,
                       screen = awful.screen.preferred,
                       placement = awful.placement.no_overlap+awful.placement.no_offscreen
       }
      },
      { rule = { class = "MPlayer" },
        properties = { floating = true } },
      { rule = { class = "pinentry" },
        properties = { floating = true } },
      { rule = { class = "gimp" },
        properties = { floating = true } },
      { rule = { class = "Firefox" },
        properties = { floating = true } },
      -- 这里class通过xprop程序来获取
      { rule = { class = "VirtualBox Manager" },
        properties = { tag="5.VM", switchtotag = true } },

      -- Floating clients.
      { rule_any = {
          instance = {
            "DTA",  -- Firefox addon DownThemAll.
            "copyq",  -- Includes session name in class.
          },
          class = {
            "Arandr",
            "Gpick",
            "Kruler",
            "MessageWin",  -- kalarm.
            "Sxiv",
            "Wpa_gui",
            "pinentry",
            "veromix",
            "xtightvncviewer"},

          name = {
            "Event Tester",  -- xev.
          },
          role = {
            "AlarmWindow",  -- Thunderbird's calendar.
            "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
          }
        }, properties = { floating = true }},

      -- Add titlebars to normal clients and dialogs
      { rule_any = {type = { "normal", "dialog" }
        }, properties = { titlebars_enabled = true }
      },

  }
#+END_SRC
*** Signal
注册事件发生时的触发函数,该函数接受一个窗口(client对象)作为参数
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  -- {{{ Signals
  -- Signal function to execute when a new client appears.
  client.connect_signal("manage", function (c)
      -- Set the windows at the slave,
      -- i.e. put it at the end of others instead of setting it master.
      -- if not awesome.startup then awful.client.setslave(c) end

      if awesome.startup and
        not c.size_hints.user_position
        and not c.size_hints.program_position then
          -- Prevent clients from being unreachable after screen count changes.
          awful.placement.no_offscreen(c)
      end
  end)

  -- Add a titlebar if titlebars_enabled is set to true in the rules.
  client.connect_signal("request::titlebars", function(c)
      -- buttons for the titlebar
      local buttons = gears.table.join(
          awful.button({ }, 1, function()
              client.focus = c
              c:raise()
              awful.mouse.client.move(c)
          end),
          awful.button({ }, 3, function()
              client.focus = c
              c:raise()
              awful.mouse.client.resize(c)
          end)
      )

      awful.titlebar(c) : setup {
          { -- Left
              awful.titlebar.widget.iconwidget(c),
              buttons = buttons,
              layout  = wibox.layout.fixed.horizontal
          },
          { -- Middle
              { -- Title
                  align  = "center",
                  widget = awful.titlebar.widget.titlewidget(c)
              },
              buttons = buttons,
              layout  = wibox.layout.flex.horizontal
          },
          { -- Right
              awful.titlebar.widget.floatingbutton (c),
              awful.titlebar.widget.maximizedbutton(c),
              awful.titlebar.widget.stickybutton   (c),
              awful.titlebar.widget.ontopbutton    (c),
              awful.titlebar.widget.closebutton    (c),
              layout = wibox.layout.fixed.horizontal()
          },
          layout = wibox.layout.align.horizontal
      }
  end)

  -- Enable sloppy focus, so that focus follows mouse.
  client.connect_signal("mouse::enter", function(c)
      if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
          and awful.client.focus.filter(c) then
          client.focus = c
      end
  end)

  client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
  client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
  -- }}}

#+END_SRC
*** 设置自启动程序
#+BEGIN_SRC  lua :tangle "~/.config/awesome/rc.lua"
  autorun = true
  autorunApps = 
    { 
      -- 使用emacs daemon unit代替
      -- "ps -fu $(whoami)|grep \"emacs --daemon\"|grep -v grep || emacs --daemon"
    }

  if autorun then
    for app = 1, #autorunApps do
      awful.util.spawn_with_shell(autorunApps[app])
    end
  end
#+END_SRC
*** 定时任务
**** 设置定时器，定时更新壁纸
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  customization.timer.change_wallpaper = gears.timer{timeout=3600,       -- 每1小时
              callback=function ()
                awful.spawn(os.getenv("HOME") .. "/bin/reddit_wallpaper.sh")
              end,
              autostart=true,
              single_shot=false
  }
#+END_SRC
*** 每次启动awesome，都用cowfortune来那么一句
#+BEGIN_SRC lua :tangle "~/.config/awesome/rc.lua"
  awful.spawn.easy_async("cowfortune",function (stdout,stderr,exitreason,exitcode)
                           naughty.notify{text=stdout,
                                          width=auto,
                                          timeout=10,
                                          border_width=0}
  end)
#+END_SRC

** Stumpwm 
:PROPERTIES:
:tangle:   ~/.stumpwmrc
:END:
#+BEGIN_SRC lisp 
  ;; vim:filetype=lisp
  (in-package :stumpwm)
  ;; 加载mode

  ;(set-contrib-dir "/usr/local/share/stumpwm")
  (mapcar #'load-module
    '("amixer"
      "cpu"
      "mem"
      "battery-portable"
      "net"
      "wifi"
      "disk"
      "app-menu"
      "stumptray"
      ;;"ttf-fonts"
      ))
  (set-prefix-key (kbd "F12"))      ;设置前缀键,已经在.xinitrc中定义Win为F12了
  ;; turn on debugging 0:disable
  (setf stumpwm::*debug-level* 0)
  ;(redirect-all-output (data-dir-file "debug-output" "txt"))

  ;(defun show-key-seq (key seq val)
  ;    (message (print-key-seq (reverse seq))))
  ;(add-hook *key-press-hook* 'show-key-seq)

  (defmacro replace-hook (hook fn)
      `(remove-hook ,hook ,fn)
      `(add-hook ,hook ,fn))

  ; If you like Meta (most probably alt on your keyboard) more than
  ; Super (which is the Windows key on mine), change 's-' into 'M-'.
  (defmacro defkey-top (key cmd)
      `(define-key *top-map* (kbd ,key) ,cmd))

  (defmacro defkeys-top (&rest keys)
      (let ((ks (mapcar #'(lambda (k) (cons 'defkey-top k)) keys)))
          `(progn ,@ks)))

  (defmacro defkey-root (key cmd)
      `(define-key *root-map* (kbd ,key) ,cmd))

  (defmacro defkeys-root (&rest keys)
      (let ((ks (mapcar #'(lambda (k) (cons 'defkey-root k)) keys)))
          `(progn ,@ks)))

  (defcommand display-current-window-info () ()
    "Shows the properties of the current window. These properties can be
  used for matching windows with run-or-raise or window placement
  -merules."
    (let ((w (current-window))
          (*suppress-echo-timeout* t)
          (nl (string #\NewLine)))

      ;; (message-no-timeout "class: ~a~%instance~a~%..." (window-class w) (window-res w) ...)
      (echo-string (current-screen)
                   (concat "class:    " (window-class w) nl
                           "instance: " (window-res w) nl
                           "type:     :" (string (window-type w)) nl
                           "role:     " (window-role w) nl
                           "title:    " (window-title w) nl
                           "width:    " (format nil "~a" (window-width w)) nl
                           "height    " (format nil "~a" (window-height w))))))

  ; 任何时候按下<s-c>就可以查单词， 非常方便！
  (defcommand dict (word) ((:rest "Word> "))
    (let ((cmd (format nil "dict ~a" word)))
      (with-output-to-string (*standard-output*)
       ,#+clisp(let ((str (ext:run-shell-command cmd :output :stream :wait nil)))
         (loop for line = (read-line str nil)
            until (null line)
            do (print line)))
       ,#+sbcl (sb-ext:run-program "/bin/sh" (list "-c" cmd) :input nil :output *standard-output*)
       ,#+ccl(ccl:run-program "/bin/sh" (list "-c" cmd) :input nil :output *standard-output*))))
  (set-fg-color "green")
  (set-bg-color "black")

  ;; 3.  安装字体： xfont-unifont
  ;;     这个字体是等宽字体，虽然中英文不能完全对齐，但显示效果很好，
  ;;     类似winxp。
  (set-font "*-unifont-medium-*-normal-*-16-*-*-*-*-*-*-*")
  ;; (set-font "-*-unifont-medium-i-normal-*-16-*-*-*-*-*-*-*")
  ;; suppress the message StumpWM displays when it starts. Set it to NIL
  (setf *startup-message* nil
        ,*suppress-frame-indicator* t
        ,*suppress-abort-messages* t
        ,*timeout-wait* 3
        ,*mouse-focus-policy* :click ;; :click, :ignore, :sloppy
        ,*message-window-gravity* :bottom-left
        ,*input-window-gravity* :bottom-left)

  ;;; Window Appearance
  (setf *normal-border-width* 1
        ,*maxsize-border-width* 1
        ,*transient-border-width* 1
        +default-frame-outline-width+ 1
        ,*float-window-title-height* 0
        ,*window-border-style* :thin) ; :thick :thin :tight :none

  (setf *time-modeline-string* "%Y-%m-%d %a ^B%l:%M^b" 
        ,*window-name-source* :title
        ;; *window-format* "^B^8*%n%s%m%15t | ^7*"
        ,*window-format* "%n%s%m%15t | "
        ,*group-format* "%t")

  (setf *chinese-day-names*
        '("一" "二" "三" "四" "五" "六" "日"))
  (defun current-date ()
    "Returns the date formatted as `2009-11-16 一 11:34:03'."
    (multiple-value-bind
    (second minute hour date month year day-of-week dst-p tz)
        (get-decoded-time)
      (format nil "~d-~2,'0d-~2,'0d ~a ^B~2,'0d:~2,'0d:~2,'0d^b"
        year month date (nth day-of-week *chinese-day-names*)
        hour minute second)))
   ;;;; The Mode Line
  (setf *mode-line-background-color* "black"
        ,*mode-line-foreground-color* "lightgreen"
        ,*mode-line-border-color* "black"
        ,*mode-line-border-width* 0
        ,*mode-line-pad-x* 0
        ,*mode-line-pad-y* 0
        ,*mode-line-timeout* 1 
      ;; *mode-line-position* :bottom
        ;; *screen-mode-line-format* (list "[%n]%W" "^>" '(:eval (current-date)))
      ,*screen-mode-line-format* (list
                   "^6*" '(:eval (current-date)) ; defined above
                   " | %D | %c(%f,%t) | %M | %l"
                   '(:eval (run-shell-command "echo" t))
                   "^2*" "[^B%n^b] %W"))

  ;; 定义mode-line的点击
  (defun show-params (mode-line button x y)
    (let ((mode-lin-content (mode-line-contents mode-line)) (mode-line-height (mode-line-height mode-line)))
    (message "mode-line:~a,~a"  x y))
    )
  (add-hook *mode-line-click-hook* 'show-params)
  ;; turn on/off the mode line for the current screen only.
  (if (not (head-mode-line (current-head)))
       (toggle-mode-line (current-screen) (current-head)))

  ;;add hook so I get notified when people say my name on IRC or IM me
  (defun echo-urgent-window (target)
      (message-no-timeout "~a has an message for you." (window-title target)))
  (add-hook *urgent-window-hook* 'echo-urgent-window)

  ;; shell program used by `run-shell-command' (`sh' by default, which is *not* 'bash' nor 'zsh')
  (setf *shell-program* (stumpwm::getenv "SHELL"))
  ;; (clear-window-placement-rules)

  (defun random-string (length)
    "Return a random string with LENGTH characters."
    (let ((alphabet (concat
         "abcdefghijklmnopqrstuvwxyz"
         "0123456789"
         "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
    (string (make-string length)))
      (map-into string (lambda (char)
             (declare (ignore char))
             (aref alphabet (random (length alphabet))))
          string)))

  (defun my-run-or-raise (cmd props &optional (all-groups *run-or-raise-all-groups*)
              (all-screens *run-or-raise-all-screens*))
    "若程序未运行,则运行程序,否则切换到该程序"
    (let* ((group (current-group))
     (frames (when (eq (type-of group) 'tile-group)
         (group-frames group))))
      (if (> (length frames) 1)
    (run-or-pull cmd props all-groups all-screens)
    (run-or-raise cmd props all-groups all-screens))))

  (defcommand firefox () ()
    "Start Firefox or switch to it, if it is already running."
    (my-run-or-raise "iceweasel" '(:class "Iceweasel")))

  ;; (defcommand file-manager () ()
  ;;   "Start nautilus"
  ;;   (my-run-or-raise "nautilus --no-desktop" '(:class "Nautilus")))

  (defcommand file-manager () ()
    "Start nemo"
    (my-run-or-raise "nemo" '(:class "FileManager")))

  (defcommand foxit () ()
    (launch-crossover-app "FoxitReader" "FoxitReader"))

  (defcommand mplayer () ()
    (my-run-or-raise "smplayer" '(:class "Smplayer")))

  (defcommand lock-screen () ()
    (run-shell-command "exec xscreensaver-command -lock"))

  (defcommand dmenu-run () ()
    (run-shell-command "$(dmenu_path | dmenu -b)"))
  ;; 定义类Emacs的快捷键
  (defvar *my-ctrl-x-keymap*
    (let ((m (stumpwm:make-sparse-keymap)))
    (stumpwm:define-key m (stumpwm:kbd "o") "fnext")
    (stumpwm:define-key m (stumpwm:kbd "C-b") "frame-windowlist")
    (stumpwm:define-key m (stumpwm:kbd "b") "pull-window-by-number")
    (stumpwm:define-key m (stumpwm:kbd "C-c") "quit")
    (stumpwm:define-key m (stumpwm:kbd "k") "delete-window")
    (stumpwm:define-key m (stumpwm:kbd "K") "kill-window")
    (stumpwm:define-key m (stumpwm:kbd "1") "only")
    (stumpwm:define-key m (stumpwm:kbd "2") "vsplit")
    (stumpwm:define-key m (stumpwm:kbd "3") "hsplit")
    m))
  (stumpwm:define-key *root-map* (stumpwm:kbd "C-x") '*my-ctrl-x-keymap*)

  ;; 定义类似awesome的快捷键
  (defkey-top "M-TAB" "other-in-frame")
  (defkey-top "s-j" "next-in-frame")
  (defkey-top "s-k" "prev-in-frame")
  (defkey-top "s-r" "dmenu-run")
  ;; (defkey-top "s-r" "run-shell-command")
  (defkey-top "s-q" "quit")
  (defkey-root "M-x" "colon")
  (defkey-top "s-RET" "exec x-terminal-emulator")
  (defkey-root "f" "file-manager")

  ;; 定义声音
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Front-1-")
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Front-1+")
  (define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle pulse")

  ;; 定义s-Fn为切换到第n个group
  (defkey-top "s-F1" "gselect 1")
  (defkey-top "s-F2" "gselect 2")
  (defkey-top "s-F3" "gselect 3")
  (defkey-top "s-F4" "gselect 4")
  (defkey-top "s-F5" "gselect 5")

  ;; 定义s-n为切换到第n个window
  (defkey-top "s-`" "select-window-by-number 0")
  (defkey-top "s-1" "select-window-by-number 1")
  (defkey-top "s-2" "select-window-by-number 2")
  (defkey-top "s-3" "select-window-by-number 3")
  (defkey-top "s-4" "select-window-by-number 4")
  (defkey-top "s-5" "select-window-by-number 5")
  (defkey-top "s-5" "select-window-by-number 6")
  (defkey-top "s-5" "select-window-by-number 7")
  (defkey-top "s-5" "select-window-by-number 8")
  (defkey-top "s-5" "select-window-by-number 9")


  (run-commands "stumptray")
  (run-shell-command "~/.nutstore/dist/bin/nutstore-pydaemon.py")
  (run-shell-command "xset b off")
  (run-shell-command "xfce4-power-manager")
  (run-shell-command "xscreensaver -no-splash")
  (run-shell-command "nm-applet")
  (run-shell-command "volti")

#+END_SRC
* bash登陆相关配置
** bash_profile
#+BEGIN_SRC sh :tangle "~/.bash_profile"
  #
  # ~/.bash_profile
  #

  # ps -fu $(whoami)|grep "emacs --daemon"|grep -v grep || LC_ALL=zh_CN.UTF-8 emacs --daemon &

  # show git branch in bash prompt
  export PS1="\u@\h \[\033[32m\]\W\[\033[33m\]\$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/')\[\033[00m\] $ "

  if shopt -q login_shell;then
      # NO BEEP
      setterm -blength 0
  fi

  [[ -f ~/.bashrc ]] && . ~/.bashrc
  export PATH=~/bin:$PATH

  # Auto load scripts in ~/bin/autoload
  LOG_FILE=/tmp/info.log
  ERR_FILE=/tmp/error.log
  if [ -d ~/bin/autoload ];then
      for f in $(ls ~/bin/autoload)
      do
          source ~/bin/autoload/$f >>$LOG_FILE 2>>$ERR_FILE
      done
  fi

  function command_exist_p()
  {
      command -v "$@" >/dev/null 2>/dev/null
  }


  if [ -z "$DISPLAY" -a "$(fgconsole)" -eq 1 -a  "$(grep MemTotal /proc/meminfo |awk '{print $2}')" -gt  2097152 ];then # 自动启用X，如果希望在 X 会话终止时保持登入状态，删除 exec
      exec startx
  elif command_exist_p fbterm && command_exist_p fcitx-fbterm ;then
      # 启动fbterm
      fcitx-fbterm-helper -l
      # fbterm -i fcitx-fbterm
  fi
#+END_SRC
** bashrc
设置man page的染色方案
#+BEGIN_SRC sh :tangle "~/.bash-it/custom/plugins/available/manpage.plugin.bash"
  export LESS_TERMCAP_mb=$'\e[1;32m'
  export LESS_TERMCAP_md=$'\e[1;32m'
  export LESS_TERMCAP_me=$'\e[0m'
  export LESS_TERMCAP_se=$'\e[0m'
  export LESS_TERMCAP_so=$'\e[01;33m'
  export LESS_TERMCAP_ue=$'\e[0m'
  export LESS_TERMCAP_us=$'\e[1;4;31m'
#+END_SRC

#+BEGIN_SRC sh :tangle "~/.bash-it/custom/aliases/available/my.aliases.bash"
  alias "vi=vim"
  if   urxvt -help 2>&1 |grep ^options |grep pixbuf >/dev/null;then
      alias urxvt='urxvt -pixmap $(find ~/Pictures/wallpaper -type f|shuf|head -n 1)'
  fi
#+END_SRC
* X相关配置
** xinitrc
#+BEGIN_SRC sh :tangle "~/.xinitrc"
  # NO BEEP
  xset -b

  # setup fcitx
  export GTK_IM_MODULE=fcitx
  export QT_IM_MODULE=fcitx
  export XMODIFIERS="@im=fcitx"
  export LANG=zh_CN.UTF-8
  export LC_ALL="zh_CN.UTF-8"
  fcitx

  # RUN emacs --daemon
  # ps -fu $(whoami)|grep "emacs --daemon"|grep -v grep || emacs --daemon &


  # 坚果云
  if command -v nutstore ;then
     nutstore &
  fi

  # 自动挂载udisk
  if command -v udiskie;then
      udiskie &
  fi

  # 自动运行redshift
  if command -v redshift;then
      redshift &
  fi

  # 屏幕保护程序

  if command -v xscreensaver;then
      xscreensaver &
  fi

  # xmodmap -e "remove Lock = Caps_Lock"
  # xmodmap -e "keysym Caps_Lock = Super_R"
  # xmodmap -e "keysym XF86WakeUp = Super_R"
  exec awesome
#+END_SRC
** Xdefaults
*** 配置Xterm
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  XTerm*metaSendsEscape:  true
  XTerm*eightBitInput:    false

  XTerm*geometry: 80x30
  XTerm*Font:       9x15

  xterm*faceName: DejaVu Sans Mono:style=Book:antialias=false:size=10
  xterm*faceNameDoublesize: WenQuanYi Micro Hei Mono:size=10
  xterm*faceSize: 8

  XTerm*locale: zh_CN.UTF-8
  xterm*utf8: true
  xterm*utf8Title: true

  XTerm*scrollBar:  true

  XTerm*rightScrollBar:  true

  XTerm*saveLines:  4096

  xterm*bellIsUrgent: true

  XTerm*scaleHeight: 1.01

  xterm*borderWidth: 0

#+END_SRC
*** 配置rxvt-unicode
**** 设置窗口大小
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.geometry: 80x30
#+END_SRC
**** 设置字体
The complete list of short names for X core fonts can be found in /usr/share/fonts/misc/fonts.alias

Other fonts can be used through Xft using the following format:
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  ! URxvt.font: 9x15
  ! URxvt.font: -misc-fixed-bold-r-normal--15-140-75-75-c-90-iso8859-1
  ! URxvt.font: xft:monaco:bold:size=10
  ! URxvt.font: xft:DejaVu Sans Mono:pixelsize=18:foundry=PfEd:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
  URxvt.font: -xos4-terminus-medium-r-normal-*-18-*-*-*-*-*-*-*
#+END_SRC

Ctrl-Win-[1..7]切换字体大小
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.keysym.C-M-1: command:\033]50;-xos4-terminus-medium-r-normal-*-12-*-*-*-*-*-*-*\007
  URxvt.keysym.C-M-2: command:\033]50;-xos4-terminus-medium-r-normal-*-14-*-*-*-*-*-*-*\007
  URxvt.keysym.C-M-3: command:\033]50;-xos4-terminus-medium-r-normal-*-18-*-*-*-*-*-*-*\007
  URxvt.keysym.C-M-4: command:\033]50;-xos4-terminus-medium-r-normal-*-22-*-*-*-*-*-*-*\007
  URxvt.keysym.C-M-5: command:\033]50;-xos4-terminus-medium-r-normal-*-24-*-*-*-*-*-*-*\007
  URxvt.keysym.C-M-6: command:\033]50;-xos4-terminus-medium-r-normal-*-28-*-*-*-*-*-*-*\007
  URxvt.keysym.C-M-7: command:\033]50;-xos4-terminus-medium-r-normal-*-32-*-*-*-*-*-*-*\007

  URxvt.keysym.C-M-n: command:\033]10;#ffffff\007\033]11;#000000\007\033]12;#ffffff\007\033]706;#00ffff\007\033]707;#ffff00\007
  URxvt.keysym.C-M-b: command:\033]10;#000000\007\033]11;#ffffff\007\033]12;#000000\007\033]706;#0000ff\007\033]707;#ff0000\007
#+END_SRC

**** 设置背景色，前景色
colorn: colour
Use the specified colour for the colour value n, where 0-7
corresponds to low-intensity (normal) colours and 8-15 corresponds
to high-intensity (bold = bright foreground, blink = bright
background) colours. The canonical names are as follows: 0=black,
1=red, 2=green, 3=yellow, 4=blue, 5=magenta, 6=cyan, 7=white, but
the actual colour names used are listed in the COLOURS AND GRAPHICS
section.
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.foreground:white
  URxvt.background:black
  URxvt.colorBD:yellow
  URxvt.colorUL:Green
  URxvt.color0: #000000
  URxvt.color1: #CC0000
  URxvt.color2: #4E9A06
  URxvt.color3: #C4A000
  URxvt.color4: #3465A4
  URxvt.color5: #75507B
  URxvt.color6: #06989A
  URxvt.color7: #D3D7CF
  URxvt.color8: #555753
  URxvt.color9: #EF2929
  URxvt.color10: #8AE234
  URxvt.color11: #FCE94F
  URxvt.color12: #729FCF
  URxvt.color13: #AD7FA8
  URxvt.color14: #34E2E2
  URxvt.color15: #EEEEEC
#+END_SRC
**** 设置桌面背景透明
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.transparent:  true
  URxvt.tintCddolor: white
  URxvt.shading: 10

#+END_SRC
**** 设置输入法
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  ! URxvt.inputMethod: iBus
#+END_SRC
**** 设置滚动条在右边
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.scrollBar: true
  URxvt.scrollBar_right:  true
#+END_SRC
**** 设置保存的行数
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.saveLines:  4096
#+END_SRC
**** 设置termname
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.termName:  xterm-256color
#+END_SRC

**** 启用perl-ext
需要安装urxvt-perls
#+BEGIN_SRC shell :sudo::
  sudo pacman -S urxvt-perls --noconfirm
#+END_SRC

urxvt打开多标签功能。
urxvt的标签支持使用鼠标操作，同时可以使用Shift+左右箭头来切换标签页，使 用Shift+向下箭头开启新标签。
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.perl-ext-common: default,tabbed,resize-font,matcher,url-select,keyboard-select
#+END_SRC

通过在urxvt中的链接上点击鼠标左键来通过设定的浏览器打开之
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.url-launcher: /usr/bin/xdg-open
  URxvt.matcher.button: 1
#+END_SRC

url-select/keyboard-select可以在屏幕中的内容之间用Vim键盘快速跳转,按下回车就能访问URL，按下y拷贝内容
#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.keysym.M-u: perl:url-select:select_next
  URxvt.url-select.launcher: /usr/bin/xdg-open
  URxvt.keysym.M-Escape: perl:keyboard-select:activate
#+END_SRC

resize-font可以更改屏幕中字体大小,但是需要先安装 =urxvt-resize-font-git=
#+BEGIN_SRC shell
  yaourt -S urxvt-resize-font-git --noconfirm
#+END_SRC

#+RESULTS:

#+BEGIN_SRC conf-xdefaults :tangle "~/.Xdefaults"
  URxvt.resize-font.smaller: C-j
  URxvt.resize-font.bigger: C-k
#+END_SRC


* 将Caps_Ctrl换成Win键
对于X41这种不带Win键，但是awesome没有Win键是很难用的。可以按照下面步骤来将Caps_Lock换成Win键

#+BEGIN_SRC sh
  xmapmode -pke > ~/.Xmodmap
  echo "remove Lock = Caps_Lock" >> ~/.Xmodmap
  echo "keysym Caps_Lock = Super_R" >> ~/.Xmodmap
#+END_SRC
* redshift配置

#+BEGIN_SRC conf-windows :tangle "~/.config/redshift.conf"
  [redshift]
  ; 设置色温
  temp-day=5500
  temp-night=3500

  ; 渐进地改变色温
  transition=1

  adjustment-method=randr

  ; 手工指定经纬度
  location-provider=manual

  [manual]
  lat=23.12
  lon=113.25
#+END_SRC
* tmux配置
** systemd后台自启动tmux
开机自启tmux有诸多好处，当tmux服务在后台运行时,启动一个tmux会话能减少许多延时。

此外，即使你没有登录，对tmux会话的任何定制都将保留，tmux会话也将会被持久化。这对于那些有重度tmux配置（启动慢）或者共享tmux会话的人来说特别有用。 

#+BEGIN_SRC conf :tangle "~/.config/systemd/user/tmux.service"
  [Unit]
  Description=Start tmux in detached session

  [Service]
  Type=forking
  ExecStart=/usr/bin/tmux new-session -s %u -d
  ExecStop=/usr/bin/tmux kill-session -t %u

  [Install]
  WantedBy=multi-user.target
#+END_SRC

** 配置tmux
如果使用的是 256 色的终端，必须在 tmux 的配置文件 tmux.conf 中将终端设置为 tmux 或 tmux-256color
#+BEGIN_SRC conf :tangle "~/.tmux.conf"
  set -g default-terminal "tmux-256color"
#+END_SRC

设置最多回滚的行数 
#+BEGIN_SRC conf :tangle  "~/.tmux.conf"
  set -g history-limit 10000
#+END_SRC

启动non-login shell
#+BEGIN_SRC conf :tangle "~/.tmux.conf"
set -g default-command "${SHELL}"
#+END_SRC

标题栏自动更改
#+BEGIN_SRC conf :tangle "~/.tmux.conf"
  set -g set-titles on
  set -g set-titles-string "#T"
#+END_SRC
